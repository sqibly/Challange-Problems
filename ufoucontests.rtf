{\rtf1\ansi \deflang1033\deff0{\fonttbl
{\f0\froman \fcharset0 \fprq2 Times New Roman;}{\f1\fmodern \fcharset0 \fprq1 Courier New;}{\f2\fswiss \fcharset0 \fprq2 Arial;}
{\f3\fmodern \fcharset238 \fprq1 Courier New CE;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue0;
\red0\green0\blue255;\red128\green0\blue128;\red255\green0\blue0;}
{\stylesheet{\fs20 \snext0 Normal;}
{\s1 \qj\li720 Level 1;}
{\s2 \qj\li1440 Level 2;}
{\s3 \qj\li2160 Level 3;}
{\s4 \qj\li2880 Level 4;}
{\s5 \qj\li3600 Level 5;}
{\s6 \qj\li4320 Level 6;}
{\s7 \qj\li5040 Level 7;}
{\s8 \qj\li5760 Level 8;}
{\s9 \qj\li6480 Level 9;}
{\s10 \qj\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _17;}
{\s11 \qj\fi-720\li1440\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _16;}
{\s12 \qj\li2160\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _15;}
{\s13 \qj\li2880\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _14;}
{\s14 \qj\li3600\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _13;}
{\s15 \qj\li4320\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _12;}
{\s16 \qj\li5040\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _11;}
{\s17 \qj\li5760\tx5760\tx6480\tx7200\tx7920\tx8640 _10;}
{\s18 \qj\fi-720\li720\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _level1;}
{\s19 \qj\fi-720\li1440\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _level2;}
{\s20 \qj\fi-720\li2160\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _level3;}
{\s21 \qj\fi-720\li2880\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _level4;}
{\s22 \qj\fi-720\li3600\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _level5;}
{\s23 \qj\fi-720\li4320\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _level6;}
{\s24 \qj\fi-720\li5040\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _level7;}
{\s25 \qj\fi-720\li5760\tx5760\tx6480\tx7200\tx7920\tx8640 _level8;}
{\s26 \qj\fi-720\li6480\tx6480\tx7200\tx7920\tx8640 _level9;}
{\s27 \qj\fi-720\li720\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levsl1;}
{\s28 \qj\fi-720\li1440\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levsl2;}
{\s29 \qj\fi-720\li2160\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levsl3;}
{\s30 \qj\fi-720\li2880\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levsl4;}
{\s31 \qj\fi-720\li3600\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levsl5;}
{\s32 \qj\fi-720\li4320\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levsl6;}
{\s33 \qj\fi-720\li5040\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levsl7;}
{\s34 \qj\fi-720\li5760\tx5760\tx6480\tx7200\tx7920\tx8640 _levsl8;}
{\s35 \qj\fi-720\li6480\tx6480\tx7200\tx7920\tx8640 _levsl9;}
{\s36 \qj\fi-720\li720\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levnl1;}
{\s37 \qj\fi-720\li1440\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levnl2;}
{\s38 \qj\fi-720\li2160\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levnl3;}
{\s39 \qj\fi-720\li2880\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levnl4;}
{\s40 \qj\fi-720\li3600\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levnl5;}
{\s41 \qj\fi-720\li4320\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levnl6;}
{\s42 \qj\fi-720\li5040\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _levnl7;}
{\s43 \qj\fi-720\li5760\tx5760\tx6480\tx7200\tx7920\tx8640 _levnl8;}
{\s44 \qj\fi-720\li6480\tx6480\tx7200\tx7920\tx8640 _levnl9;}
{\s45 Normal;}
{\s46 Definition T;}
{\s47 \qj\li360\tx360\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 Definition L;}
{\*\cs48 \additive\i Definition;}
{\s49 \b\fs48 H1;}
{\s50 \b\fs36 H2;}
{\s51 \b\fs28 H3;}
{\s52 \b H4;}
{\s53 \b\fs20 H5;}
{\s54 \b\fs16 H6;}
{\s55 \i Address;}
{\s56 \qj\li360\ri360\tx360\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 Blockquote;}
{\*\cs57 \additive\i CITE;}
{\*\cs58 \additive\f1\fs20 CODE;}
{\*\cs59 \additive\i Emphasis;}
{\*\cs60 \additive\ul\cf3 Hyperlink;}
{\*\cs61 \additive\ul\cf4 FollowedHype;}
{\*\cs62 \additive\b\f1\fs20 Keyboard;}
{\s63 \qj\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx9356 \f1\fs20 Preformatted;}
{\s64 \qc \brdrt\brdrdb\brdrw6\brdrcf2 \f2\fs16 zBottom of ;}
{\s65 \qc \brdrb\brdrdb\brdrw6\brdrcf2 \f2\fs16 zTop of For;}
{\*\cs66 \additive\f1 Sample;}
{\*\cs67 \additive\b Strong;}
{\*\cs68 \additive\f1\fs20 Typewriter;}
{\*\cs69 \additive\i Variable;}
{\*\cs70 \additive\v \additive\v\cf5 HTML Markup;}
{\*\cs71 \additive \additive Comment;}
{\s72 \qj _26;}
{\s73 \qj\fi-720\li1440\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _25;}
{\s74 \qj\li2160\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _24;}
{\s75 \qj\li2880\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _23;}
{\s76 \qj\li3600\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _22;}
{\s77 \qj\li4320\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _21;}
{\s78 \qj\li5040\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _20;}
{\s79 \qj\li5760\tx5760\tx6480\tx7200\tx7920\tx8640 _19;}
{\s80 \qj\li6480\tx6480\tx7200\tx7920\tx8640 _18;}
{\s81 \qj\li6480\tx6480\tx7200\tx7920\tx8640 _9;}
{\s82 \qj\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _8;}
{\s83 \qj\fi-720\li1440\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _7;}
{\s84 \qj\li2160\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _6;}
{\s85 \qj\li2880\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _5;}
{\s86 \qj\li3600\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _4;}
{\s87 \qj\li4320\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _3;}
{\s88 \qj\li5040\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 _2;}
{\s89 \qj\li5760\tx5760\tx6480\tx7200\tx7920\tx8640 _1;}
{\s90 \qj\li6480\tx6480\tx7200\tx7920\tx8640 _;}
}\notabind\margl1440\margr1440\margt720\margb720\hyphhotz936\ftnbj\fet2\ftnrstpg\aftnnar\viewkind1\lytprtmet\subfontbysize \sectd \sbknone\marglsxn720\margrsxn720\headery1440\footery1440\endnhere\endnhere 
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl3\pnlcrm\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl5\pnlcltr\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl6\pnlcrm\pnstart1{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pnlcltr\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1}

{\field{\*\fldinst {\lang4105  SEQ CHAPTER \\h \\r 1}}{\fldrslt }}\pard \fs24
{\plain \fs24 \b UofU ACM Computing Contests}{\plain \fs24 \par
}{\plain \fs24 \par
}{\plain \fs24 \b 1991 Contest}{\plain \fs24 \par
}{\plain \fs24 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 1}{\plain \fs16 \ul\f1\fs16 :}{\plain \fs16 \f1\fs16                                 \par
}{\plain \fs16 \f1\fs16                                  \par
}{\plain \fs16 \f1\fs16 For this problem you are to write a program that takes as input two numbers which are the base  and height of a \softline
rectangle, Your program should print out the border of the rectangle using +, and the inside using =. The base \softline
and the height will be at most 20.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         Input: 6 4\par
}{\plain \fs16 \f1\fs16         Output:\par
}{\plain \fs16 \f1\fs16                ++++++\par
}{\plain \fs16 \f1\fs16                +====+\par
}{\plain \fs16 \f1\fs16                +====+\par
}{\plain \fs16 \f1\fs16                ++++++\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         Input: 3 2\par
}{\plain \fs16 \f1\fs16         Output:\par
}{\plain \fs16 \f1\fs16                +++\par
}{\plain \fs16 \f1\fs16                +++\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16   \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 2}{\plain \fs16 \f1\fs16 :\par
}{\plain \fs16 \f1\fs16                                  \par
}{\plain \fs16 \f1\fs16 Write a program which accepts as input a string of up to 40 lower case letters and produces two lines of output. \softline
The first line has all the vowels (a,e,i,o,u)  in the input string in the order they appeared. The second line \softline
has all the non-vowels in  the REVERSE order to which they appeared. The vowels appear forwards and the \softline
consonants appear backwards. \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example:\par
}{\plain \fs16 \f1\fs16         INPUT:\par
}{\plain \fs16 \f1\fs16                naturally\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         OUTPUT:\par
}{\plain \fs16 \f1\fs16         \par
}{\plain \fs16 \f1\fs16                aua\par
}{\plain \fs16 \f1\fs16                yllrtn \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 3:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 A world archery competition has commissioned you to write a scoring program. The target computer reports the \softline
point of impact as an (X,Y) pair. It also reports the coordinate for the center of the target as an (X,Y) pair \softline
(not all of the targets are equally aligned!). All X and Y will be between 0 and 50. \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The target has 5 concentric rings. The bull's-eye has radius 10 and each successive ring increases the radius by \softline
5. The bull's-eye scores 9 and each successive ring scores 2 less. Missing the  target scores 0. Assume that \softline
impacts on a boundary line between two rings score the lower of the two scores. \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Thus: \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         Input is what the target computer reports:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         center: X = 31, Y = 32\par
}{\plain \fs16 \f1\fs16         impact point: X = 35, Y = 49\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program, given this information, would print \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         "The score is 5."\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input for your program will be two lines with two number on each line. The number on the first line is the \softline
center point and the number on the second line is the impact point. \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output is the score. \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Examples:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         INPUT:\par
}{\plain \fs16 \f1\fs16         0 0\par
}{\plain \fs16 \f1\fs16         5 12\par
}{\plain \fs16 \f1\fs16         OUTPUT:\par
}{\plain \fs16 \f1\fs16         The score is 7.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         INPUT:\par
}{\plain \fs16 \f1\fs16         1 1\par
}{\plain \fs16 \f1\fs16         40 40\par
}{\plain \fs16 \f1\fs16         OUTPUT:\par
}{\plain \fs16 \f1\fs16         The score is 0.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Recall that the square of the distance between two points (X1,Y1) and (X2,Y2) is (X2-X1)(X2-X1)+(Y2-Y1)(Y2-Y1).\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 4:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                  \par
}{\plain \fs16 \f1\fs16 Describing Sequences\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The following sequence of positive integers is generated by a rule which tells how each number is determined \softline
from the previous number. The rule is not obvious and will be explained below.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         1\par
}{\plain \fs16 \f1\fs16         11\par
}{\plain \fs16 \f1\fs16         21\par
}{\plain \fs16 \f1\fs16         1211\par
}{\plain \fs16 \f1\fs16         111221\par
}{\plain \fs16 \f1\fs16         312211\par
}{\plain \fs16 \f1\fs16         13112221\par
}{\plain \fs16 \f1\fs16         1113213211\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         and so on.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 To determine the next number in the sequence proceed as follows:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 1. Read the current number as a string of digits from left to right.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 2. Describe the string by writing down the number of consecutive occurrences of an encountered digit followed by \softline
that digit.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 3.Repeat step 2. as you read from left to right. For example the first number in  the sequence above could be \softline
anything but we chose 1. Reading that first number from left to right we see one 1. Hence the second number is \softline
11 (one 1). Reading that second number from left to right we see two 1's. Hence the third number is 21 (two \softline
1's). Reading the third number we see one 2 and then one 1. Hence the fourth number is 1211 (one 2 and one 1).\par
}{\plain \fs16 \f1\fs16 Reading that we see one 1,  one 2, and two 1's. Remember that we accumulate the last two 1's and don't describe \softline
them separately.So the next number is 111221.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 PROBLEM:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You are to write a program that accepts as INPUT a string of up to 20 digits between 1 and 3 and having an even \softline
number of digits. Your program is  to produce as OUTPUT two strings. The first should be the PREVIOUS string is \softline
the sequence  -  i.e. the string described by the input string.  The second output should be the NEXT string in \softline
the sequence  -  i.e.  the string describing the input string. \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 EXAMPLE:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         INPUT: 312211\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         OUTPUT:111221\par
}{\plain \fs16 \f1\fs16                13112221\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Ask if you can't understand how the sequence is generated.   \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 5:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Consider a two dimensional array of cells,  each of which  may be either full or empty. Any group of full cells \softline
which are connected horizontally or vertically (but  NOT  diagonally) is  said to constitute a "blob". For \softline
example, in the array shown bellow, there are three blobs.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                              -------------------\par
}{\plain \fs16 \f1\fs16                             | 1 |   |   |   |   | \par
}{\plain \fs16 \f1\fs16                              -------------------\par
}{\plain \fs16 \f1\fs16                             |   | 1 | 1 | 1 | 1 |\par
}{\plain \fs16 \f1\fs16                              -------------------\par
}{\plain \fs16 \f1\fs16                             | 1 |   | 1 |   | 1 |\par
}{\plain \fs16 \f1\fs16                              -------------------\par
}{\plain \fs16 \f1\fs16                             | 1 |   |   |   | 1 |\par
}{\plain \fs16 \f1\fs16                              -------------------\par
}{\plain \fs16 \f1\fs16                             |   | 1 | 1 | 1 | 1 |\par
}{\plain \fs16 \f1\fs16                              -------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 PROBLEM\par
}{\plain \fs16 \f1\fs16 -------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You are to write a program which inputs an N x N array  of binary values and outputs the number of blobs in that \softline
array. The value of N is also to be an input to the program.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program will first prompt the user for a value of N. You may assume that N will not exceed 50 for the  \softline
purposes of this contest. After reading N, the program will input N lines of N 0's or  1's that represent the N \softline
x N array. The 0's and 1's are separated by spaces, so the input for the example above would be as follows:\par
}{\plain \fs16 \f1\fs16         1 0 0 0 0 \par
}{\plain \fs16 \f1\fs16         0 1 1 1 1\par
}{\plain \fs16 \f1\fs16         1 0 1 0 1\par
}{\plain \fs16 \f1\fs16         1 0 0 0 1\par
}{\plain \fs16 \f1\fs16         0 1 1 1 1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 All inputs will come from the keyboard.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs24 \b 1992 Contest}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The Situation\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Recently, a NASA probe has discovered life on another planet circling another star system. They call themselves \softline
the people of UQQX IVDHJ. Your job is to help NASA understand this culture.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 1:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Lucky for us the people of UQQX IVDHJ do speak English. However, they write sentences down in a strange way. \softline
They use different letters depending on where they are in a sentence. The first letter of the sentence is the \softline
same letter as in our alphabet. The second letter is the letter lexically less than (below) the corresponding \softline
letter in our alphabet. The third letter of the sentence is two below, etc.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Our alphabet: ABCDE ... WXYZ\par
}{\plain \fs16 \f1\fs16 First Letter: ABCDE ... WXYZ\par
}{\plain \fs16 \f1\fs16 Second Letter: ZABCD ... VWXY\par
}{\plain \fs16 \f1\fs16 Third Letter: YZABC ... UVWX\par
}{\plain \fs16 \f1\fs16 ...\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 For instance, the English word CAB would be CZZ in UQQX IVDHJ. The English word WED would be WDB.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Please write a program that takes in a one line sentence of UQQX IVDHJ language and outputs the English \softline
translation. You may assume that only one sentence will be enterer on a line, and that the line entered contains \softline
uppercase letters, spaces, and punctuation marks. Spaces and punctuation marks are the same in UQQX IVDHJ as \softline
they are in English. You many not assume senteces are less than 26 characters long (they are wordy people). \softline
However, the sentnces will be less than 80 characters long.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example:\par
}{\plain \fs16 \f1\fs16 >a.out\par
}{\plain \fs16 \f1\fs16 Input sentence: AQC TA CUOAEW UIA KPD?\par
}{\plain \fs16 \f1\fs16 English translation: ARE WE HAVING FUN YET?\par
}{\plain \fs16 \f1\fs16 \par
}\sect \sectd \sbknone\marglsxn720\margrsxn720\headery1440\footery1440\endnhere\endnhere 
{\*\pnseclvl1\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl2\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl3\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl4\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl5\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl6\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl7\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl8\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl9\pnstart1\pnf1{\pntxta {\u9656\'20}}}

\pard \fs16
{\plain \fs16 \f1\fs16 >a.out\par
}{\plain \fs16 \f1\fs16 Input sentence: TN ZB KM HHL KE QS, GTLD RA ANJ UXGTTHMK.\par
}{\plain \fs16 \f1\fs16 English translation: TO BE OR NOT TO BE, THAT IS THE QUESTION.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 2:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The people of UQQX IVDHJ need help with a problem. They make mats our of a plant called PZNVNPM. Many times they \softline
cut these mats into smaller mats. Because the people of UQQX IVDHJ are very conscious of their environment, they \softline
don{\u8217\'92}t link to waste their mats.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Please write a program that inputs the length and width of a mat, and then the length and width of two other \softline
mats to be cut from the original mat. The length and width of the mats are interchangeable (i.e. the mat can be \softline
turned around). Output whether the two mats can be cut from one of the original size mats, or whether two of the \softline
original size mats are needed, or the new mats cannot be cut from the original mat (at least one of the mats \softline
cannot be cut from the original mat at all).\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 >a.out\par
}{\plain \fs16 \f1\fs16 Original mat length: 24\par
}{\plain \fs16 \f1\fs16 Original mat width: 36\par
}{\plain \fs16 \f1\fs16 Mat 1 length: 30\par
}{\plain \fs16 \f1\fs16 Mat 1 width: 20\par
}{\plain \fs16 \f1\fs16 Mat 2 length: 5\par
}{\plain \fs16 \f1\fs16 mat 2 width: 8\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 One mat needed.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 >a.out\par
}{\plain \fs16 \f1\fs16 Original mat length: 36\par
}{\plain \fs16 \f1\fs16 Original mat width: 24\par
}{\plain \fs16 \f1\fs16 Mat 1 length: 20\par
}{\plain \fs16 \f1\fs16 Mat 1 width: 32\par
}{\plain \fs16 \f1\fs16 Mat 2 length: 5\par
}{\plain \fs16 \f1\fs16 mat 2 width: 8\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Two mats needed.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 >a.out\par
}{\plain \fs16 \f1\fs16 Original mat length: 24\par
}{\plain \fs16 \f1\fs16 Original mat width: 36\par
}{\plain \fs16 \f1\fs16 Mat 1 length: 28\par
}{\plain \fs16 \f1\fs16 Mat 1 width: 26\par
}{\plain \fs16 \f1\fs16 Mat 2 length: 5\par
}{\plain \fs16 \f1\fs16 mat 2 width: 8\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Impossible.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 3:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The people of UQQX IVDHJ hold in regard a class of words that they call PZJFJYLHEVI. They have the property that \softline
the word reads the same from left to right as it does from right to left. Some examples of  PZJFJYLHEVI are A, \softline
OO, GAG, TOOT, and RADAR. The words ACM, HIGH, and SCHOOL are not.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 They also like words that have  PZJFJYLHEVI within the words. The more unique  PZJFJYLHEVI there are within a \softline
word, the better the word.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Please write a program that takes in an English word, and counts up how many unique  PZJFJYLHEVI there are in \softline
the word. You do not have to output what the  PZJFJYLHEVI are.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 >a.out\par
}{\plain \fs16 \f1\fs16 Word to be processed: RADAR\par
}{\plain \fs16 \f1\fs16 Number or  PZJFJYLHEVI: 5\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 (In this case the  PZJFJYLHEVI are R, A, D, ADA, and RADAR)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 >a.out\par
}{\plain \fs16 \f1\fs16 Word to be processed: HIGH\par
}{\plain \fs16 \f1\fs16 Number of  PZJFJYLHEVI: 3\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 (H, I, and G are the  PZJFJYLHEVI)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 >a.out\par
}{\plain \fs16 \f1\fs16 Word to be processed: SCHOOL\par
}{\plain \fs16 \f1\fs16 Number of  PZJFJYLHEVI: 6\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 (They are S, C, H, O, L, OO)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 4:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The people of UQQX IVDHJ have a special regard for numbers which have prime factors that differ by 6 (we are not \softline
sure why). They say that they contain SHV XLKYTD. For example the number 220 is a SHV XLKYTD number. Its factors \softline
are 2, 5, and 11, and the factors 5 and 11 differ by 6. The nubmer 105 is not a SHV XLKYTD number. It has the \softline
vactos 3, 5, and 7, none of which differ by 6. (Note that 1 is not considered to be a prime factor)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Please write a program that inputs 2 numbers and outputs all the number between and including the two numbers \softline
that have prime factors differing by 6. You do not have to output what the number factors into. If there are no \softline
numbers in that range that have SHV XLKYTD, don{\u8217\'92}t print any numbers.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 >a.out\par
}{\plain \fs16 \f1\fs16 Starting number: 748\par
}{\plain \fs16 \f1\fs16 Ending number: 820\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 SHV XLKYTD Numbers\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 748\ul0 \tab \ul0 \tab \ul0 \tab (Factors 2, 11, 17)\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 770\ul0 \tab \ul0 \tab \ul0 \tab (Factors 2, 5, 7, 11)\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 782\ul0 \tab \ul0 \tab \ul0 \tab (Factors 2, 17, 23)\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 819\ul0 \tab \ul0 \tab \ul0 \tab (Factors 3, 7, 13)\par
}\pard \fs16
{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 >a.out\par
}{\plain \fs16 \f1\fs16 Starting number: 2\par
}{\plain \fs16 \f1\fs16 Ending number: 20\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 SHV XLKYTD Numbers (There were no numbers in that range)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 >a.out\par
}{\plain \fs16 \f1\fs16 Starting number: 50\par
}{\plain \fs16 \f1\fs16 Ending number: 100\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 SHV XLKYTD Numbers\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 55\ul0 \tab \ul0 \tab \ul0 \tab (Factors 5, 11)\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 91\ul0 \tab \ul0 \tab \ul0 \tab (Factors 7, 13)\par
}\pard \fs16
{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 5:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The people of UQQX IVDHJ are conducting experiments with an animal called a MNSPA going after something called \softline
CGCB)Z in a maze.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Please write a program to solve a given maze. In the problem 5 directory there is a function that you can use to \softline
read in the maze from a file. The maze will fit into a 20 by 20 matrix. The file will contain the following 
characters:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 X - a wall\par
}{\plain \fs16 \f1\fs16 C - the CGCBOZ\par
}{\plain \fs16 \f1\fs16 M - the MNSPA\par
}{\plain \fs16 \f1\fs16 space - clear space\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 After you have read in the maze, output the most direct path that the MNSPA must take to get to the CGCBOZ (or \softline
you could output the path from the CGCBOZ to the MNSPA, we don{\u8217\'92}t care). There will be only one path. Do not \softline
print out {\u8220\'93}dead end{\u8221\'94} parts of the path. Print the path as the coordinates of the places that the MNSPA must \softline
follow. The horizontal coordinates go from left to right, the vertical coordinates go from top to bottom. List \softline
the horizontal coordinate and then the vertical coordinate. The maze will contain no cycles and will have a \softline
solid boundary of X{\u8217\'92}s around it.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 >a.out\par
}{\plain \fs16 \f1\fs16 Name of the maze file: maze1.dat\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Path to follow:\par
}{\plain \fs16 \f1\fs16 2,5\par
}{\plain \fs16 \f1\fs16 3,5\par
}{\plain \fs16 \f1\fs16 4,5\par
}{\plain \fs16 \f1\fs16 5,5\par
}{\plain \fs16 \f1\fs16 5,4\par
}{\plain \fs16 \f1\fs16 5,3\par
}{\plain \fs16 \f1\fs16 4,3\par
}{\plain \fs16 \f1\fs16 4,3\par
}{\plain \fs16 \f1\fs16 3,2\par
}{\plain \fs16 \f1\fs16 2,2\par
}{\plain \fs16 \f1\fs16 2,3\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Where the file maze1.dat looks lie\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 1234567\par
}{\plain \fs16 \f1\fs16 XXXXXXX\par
}{\plain \fs16 \f1\fs16 X   X X\par
}{\plain \fs16 \f1\fs16 XCX   X\par
}{\plain \fs16 \f1\fs16 XXXX XX\par
}{\plain \fs16 \f1\fs16 XM    X\par
}{\plain \fs16 \f1\fs16 XXXXXXX\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Note: TGGP LMIUDVC XG RMDSNZ PL DSX WTE QCZQMMBGE.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs24 \b 1993 Contest}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 1:}{\plain \fs16 \b\f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Write a program that inputs two lines, each with less than or equal to 80 characters. If the two lines are \softline
equivalent, the program is to output the message "These lines are equivalent."  If they are not equivalent, the \softline
program is to output the message "These lines are not equivalent."  In order to be equivalent, the lines must \softline
meet two criteria:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 (a) They must have the same number of characters, including trailing spaces.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 (b) They must have an equivalent sequence of characters.  Upper and lower case versions of the same alpha \softline
character are considered to be equivalent.  Other characters are equivalent only to themselves.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example:\par
}{\plain \fs16 \f1\fs16 -------\par
}{\plain \fs16 \f1\fs16 line1:  Utah will make the final four!\par
}{\plain \fs16 \f1\fs16 line2:  BYU will be lucky to win the first round.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output: These lines are not equivalent.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example:\par
}{\plain \fs16 \f1\fs16 -------\par
}{\plain \fs16 \f1\fs16 line1:  Utah will make the final four!\par
}{\plain \fs16 \f1\fs16 line2:  Utah will make the FINAL FOUR!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output: These lines are equivalent.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 2:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Write a program that inputs an integer N.  If N is less than or equal to zero, the program is to end.  If N is \softline
greater than zero, it is to output Pascal's triangle of depth N.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Pascal's triangle of depth N is a sequence of N lists of integers.  The first list consists only of the integer \softline
1.  The first and last integers in the other lists are 1's.  The integers between the first and last are \softline
computed from the previous list; each one is the sum of the integer immediately above it and the one above and \softline
to the left.  For example, if the previous list is\par
}{\plain \fs16 \f1\fs16         1 3 3 1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 the current list would be\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         1 4 6 4 1  \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 since 4 = 1+3,  6 = 3+3, and 4 = 3+1.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program must output each list on a single line, and it must work for values of N as large as 20.  At least \softline
one space must separate the integers in a list, but lists are not required to be lined up with one another.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example: \par
}{\plain \fs16 \f1\fs16 -------\par
}{\plain \fs16 \f1\fs16 input:\par
}{\plain \fs16 \f1\fs16         7\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16         1\par
}{\plain \fs16 \f1\fs16         1   1\par
}{\plain \fs16 \f1\fs16         1   2   1\par
}{\plain \fs16 \f1\fs16         1   3   3   1\par
}{\plain \fs16 \f1\fs16         1   4   6   4   1\par
}{\plain \fs16 \f1\fs16         1   5  10  10   5   1\par
}{\plain \fs16 \f1\fs16         1   6  15  20  15   6   1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 3:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Mastermind is a game in which one player sets up a line of colored pegs, and the second player tries to figure \softline
out the color of those pegs.  The technique used is as follows: \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 (a) The second player guesses the color of all of the pegs. \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 (b) The first player responds by giving Black and White tokens to his opponent, based upon the correctness of \softline
the guess.  A Black token is given for each peg that has both the correct color and the correct position in the \softline
line. A White token is given for each peg that has the correct color, but is in the wrong position in the line.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 (c) The process is repeated until the guess receives the maximum number of Black tokens.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Write a program that calculates the value of a guess in this game.  Your program is first to input four \softline
characters that represent the actual sequence. It is then to input four characters that represent a guess.  The \softline
output is to be the number of Black and White tokens awarded to the guess.  Possible colors and the character \softline
used to represent them in the input to your program are as follows:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         R = Red, Y = Yellow, G = Green, B = Blue, O = Orange, T = Tan\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example: \par
}{\plain \fs16 \f1\fs16 -------\par
}{\plain \fs16 \f1\fs16 Correct: RRRR\par
}{\plain \fs16 \f1\fs16 Guess:   RYBB\par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         Black: 1\par
}{\plain \fs16 \f1\fs16         White: 0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example: \par
}{\plain \fs16 \f1\fs16 -------\par
}{\plain \fs16 \f1\fs16 Correct: RYRY\par
}{\plain \fs16 \f1\fs16 Guess:   YRRY\par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         Black: 2\par
}{\plain \fs16 \f1\fs16         White: 2\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example: \par
}{\plain \fs16 \f1\fs16 -------\par
}{\plain \fs16 \f1\fs16 Correct: TOBY\par
}{\plain \fs16 \f1\fs16 Guess:   YBOT\par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         Black: 0\par
}{\plain \fs16 \f1\fs16         White: 4\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example: \par
}{\plain \fs16 \f1\fs16 -------\par
}{\plain \fs16 \f1\fs16 Correct: TOBY\par
}{\plain \fs16 \f1\fs16 Guess:   TOBY\par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         Black: 4\par
}{\plain \fs16 \f1\fs16         White: 0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 4}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Fax machines represent pictures as a series of dots (or pixels), each of which may be stored as a single bit.  
If the pixel is black, the the bit is 1; if the pixel is white, the bit is 0.  In order to send the picture to \softline
another machine, these 1's and 0's are transmitted across the wire.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 In order to send information over a network as quickly as possible, it is important that it be represented using \softline
as few bits as possible. The process of reducing the number of bits required to represent the same amount of \softline
information is called "data compression."  A common method of data compression is called "run length encoding" \softline
or RLE.  This works particularly well for data that consists of mostly 0's with a few interspersed 1's, which is \softline
common for pictorial information.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You are to write a program that implements the RLE data compression algorithm. Your program is to accept as \softline
input a line of 0's and 1's with no spaces between them.  It is to compress that input data using the RLE \softline
algorithm and output the new line of 0's and 1's.  The input line will be no longer than 50 characters.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The RLE algorithm is as follows:  \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 (a) The input data is first translated into a sequence of integers that specify the number of 0's that precede \softline
each 1 in the line, as well as the number of 0's at the end of the line.  For example, the input\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         0001000000001101000000000000001\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 produces the sequence\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         3  8  0  1  14  0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 since there are three leading 0's followed by a 1, then eight 0's followed by a 1, then zero 0's followed by a \softline
1, then one 0 followed by a 1, then fourteen 0's followed by a 1, then zero trailing 0's.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 (b) Each of these integers is then translated into a list of one or more numbers between 0 and 7.  If the \softline
integer is less than 7, it is represented by itself.  If the integer is 7 or greater, it is broken up into a \softline
group of 7's followed by an integer less than 7; the sum of the numbers in the group is the value of the \softline
integer.  For example, the above sequence turns into\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         3  7,1  0  1  7,7,0  0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 since 8 = 7+1 and 14 = 7+7+0.  Note that the algorithm always converts an integer that is a multiple of 7 into \softline
some number of 7's followed by a 0.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 (c) Finally, each of the numbers in this list is converted to its 3-bit binary equivalent, which is the \softline
compressed data.  For our example, the data that is actually transmitted would be\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         011 111 001 000 001 111 111 000 000\par
}{\plain \fs16 \f1\fs16         (3) (7) (1) (0) (1) (7) (7) (0) (0)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 (over)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example:\par
}{\plain \fs16 \f1\fs16 -------\par
}{\plain \fs16 \f1\fs16 Input:  0001000000001101000000000000001\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output: 011111001000001111111000000\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 *******************************************************************************\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         Just in case you haven't learned about binary numbers, here\par
}{\plain \fs16 \f1\fs16         is a conversion chart for the decimal numbers 0 through 7:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         0 - 000         2 - 010         4 - 100         6 - 110\par
}{\plain \fs16 \f1\fs16         1 - 001         3 - 011         5 - 101         7 - 111\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                         }{\plain \fs16 \b\f1\fs16 ***  Problem 5  ***\par
}{\plain \fs16 \b\f1\fs16                         -------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Selecting the least expensive way to fly from one place to another can be a complex task.  The problem is that \softline
air fares are not necessarily proportional to the distance flown or to the number of stops.  The cost of a \softline
flight may depend more upon the amount of competition than any other factor.  In order to find the best route, \softline
it is necessary to check many possible alternatives.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You are to write a program that selects the least expensive route for an airplane trip.  Input to the program \softline
will be a list of all available flights between pairs of cities, along with the cost of each.  Output is to be \softline
the total cost and a description of the chosen route.  The input will have the following format:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         NumberOfCities\par
}{\plain \fs16 \f1\fs16         StartCity EndCity\par
}{\plain \fs16 \f1\fs16         FromCity ToCity Cost\par
}{\plain \fs16 \f1\fs16         FromCity ToCity Cost\par
}{\plain \fs16 \f1\fs16         FromCity ToCity Cost\par
}{\plain \fs16 \f1\fs16                 .\par
}{\plain \fs16 \f1\fs16                 .\par
}{\plain \fs16 \f1\fs16         0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Cities are numbered from 1 to NumberOfCities, and NumberOfCities will not exceed 6.  Only the listed flights are \softline
available.  (Note that a flight from city A to city B does not imply that there is a flight from B to A.  Also, \softline
the cost of a flight from A to B may not be the same as one from B to A.) Your program is to print out the least \softline
expensive route from StartCity to EndCity as well as the total cost.  You may assume that a path exists from the \softline
start city to the end city.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example: \par
}{\plain \fs16 \f1\fs16 -------\par
}{\plain \fs16 \f1\fs16 input:  5\par
}{\plain \fs16 \f1\fs16         1 3\par
}{\plain \fs16 \f1\fs16         1 2 20\par
}{\plain \fs16 \f1\fs16         1 3 100\ul0 \tab \ul0 \tab \ul0 \tab \par
}{\plain \fs16 \f1\fs16         1 5 10\par
}{\plain \fs16 \f1\fs16         2 3 20\par
}{\plain \fs16 \f1\fs16         4 3 10\par
}{\plain \fs16 \f1\fs16         5 1 10\par
}{\plain \fs16 \f1\fs16         5 4 10\par
}{\plain \fs16 \f1\fs16         0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16         The minimum cost is: 30\par
}{\plain \fs16 \f1\fs16         The least expensive route is: 1 5 4 3\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs24 \b 1994 Contest}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                         }{\plain \fs16 \b\f1\fs16 ***   Problem 1   ***\par
}{\plain \fs16 \b\f1\fs16                         ---------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You are to write a program that accepts as input a single line with no more than 80 characters.  The program is \softline
to find the last occurrence of the substring "acm", regardless of case, if it exists in the line.  The program\par
}{\plain \fs16 \f1\fs16 then outputs, on separate lines, (1) the part of the input that precedes the last occurrence of "acm", (2) the \softline
acm substring itself, and (3) the remainder of the input.  If the last occurrence of "acm" is at the beginning \softline
of the input, the first output line is to be omitted.  If the last occurrence of "acm" is at the end of the \softline
input, the third output line is to be omitted.  If the substring "acm" does not occur in the input, the last two \softline
output lines should be omitted.  You may assume that the input line will be 1 to 80 characters in length.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input: \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The ACM contest on March 18, 1994, was won by MacMillan High School.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The ACM contest on March 18, 1994, was won by M\par
}{\plain \fs16 \f1\fs16 acM\par
}{\plain \fs16 \f1\fs16 illan High School.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input: \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The University ski team placed second in the 1994 NCAA Championships.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The University ski team placed second in the 1994 NCAA Championships.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\f1\fs16                         ***   Problem 2   ***\par
}{\plain \fs16 \b\f1\fs16                         ---------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 N people, numbered 1 to N, stand in a circle.  They count off, and the Mth person drops out of the circle.  \softline
Counting continues, starting with the next person, and again the Mth drops out.  This continues until only one \softline
person is left.  You are to write a program that inputs a value for N and for M, and then outputs the sequence \softline
in which the people drop out.  The first number entered will be N, and the second will be M.  You may assume \softline
that both N and M are greater than 0.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input: \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 7  4\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 4\par
}{\plain \fs16 \f1\fs16 1\par
}{\plain \fs16 \f1\fs16 6\par
}{\plain \fs16 \f1\fs16 5\par
}{\plain \fs16 \f1\fs16 7\par
}{\plain \fs16 \f1\fs16 3\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input: \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 4  7\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 3\par
}{\plain \fs16 \f1\fs16 4\par
}{\plain \fs16 \f1\fs16 1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                         }{\plain \fs16 \b\f1\fs16 ***   Problem 3   ***\par
}{\plain \fs16 \b\f1\fs16                         ---------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You are to write a program that accepts as input a single line with no more than 80 characters.  The program is \softline
to output a line with the order of the words reversed.  Words are defined as sequences of non-space characters.\par
}{\plain \fs16 \f1\fs16 (Punctuation marks are considered to be non-space characters.)  The order of the characters within the words is \softline
not to be changed.  You may assume that one space will occur between words and that the input line will be 1 to \softline
80 characters in length.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input: \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The University ski team placed second in the 1994 NCAA Championships.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Championships. NCAA 1994 the in second placed team ski University The\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The ACM contest on March 18, 1994, was won by MacMillan High School.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 School. High MacMillan by won was 1994, 18, March on contest ACM The\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                         }{\plain \fs16 \b\f1\fs16 ***   Problem 4   ***\par
}{\plain \fs16 \b\f1\fs16                         ---------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 An abundant number is defined to be one which is less than the sum of its factors, excluding itself.  For \softline
example, the factors of 12 are 1, 2, 3, 4, and 6.  1 + 2 + 3 + 4 + 6 = 16, which is greater than 12.  Therefore, \softline
12 is an abundant number.  The first four abundant numbers are 12, 18, 20, and 24.  You are to write a program \softline
that inputs an integer N and outputs the Nth abundant number.  You may assume that N will be greater than 0 and \softline
less than 100.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 4\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 24\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 12\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                         }{\plain \fs16 \b\f1\fs16 ***   Problem 5   ***\par
}{\plain \fs16 \b\f1\fs16                         ---------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Consider a group of N people, each of whom know one or more of the other people in the group.  Let us define an \softline
"independent subgroup" of those N people such that everyone in the subgroup knows at least one other person in\par
}{\plain \fs16 \f1\fs16 the subgroup, but nobody in the subgroup knows any of the N people who are not in the subgroup.  Here is an \softline
example.  Assume that N is 9 and that the people are numbered from 1 to 9:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         1 and 2 know one another\par
}{\plain \fs16 \f1\fs16         1 and 3 know one another\par
}{\plain \fs16 \f1\fs16         2 and 4 know one another\par
}{\plain \fs16 \f1\fs16         3 and 5 know one another\par
}{\plain \fs16 \f1\fs16         6 and 7 know one another\par
}{\plain \fs16 \f1\fs16         6 and 8 know one another\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 In this example 1, 2, 3, 4, and 5 constitute an independent subgroup, since each of them know at least one other \softline
person in the subgroup, but none of them knows anyone outside of the subgroup.  6, 7, and 8 constitute a second\par
}{\plain \fs16 \f1\fs16 independent subgroup for the same reason. Finally, 9 constitutes a third independent subgroup since 9 does not \softline
know anyone else.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You are to write a program that inputs information that describes a group of N people and outputs the number of \softline
independent subgroups within that group.  The format of the input is as follows:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 N\par
}{\plain \fs16 \f1\fs16 PersonA  PersonB\par
}{\plain \fs16 \f1\fs16 PersonA  PersonB\par
}{\plain \fs16 \f1\fs16 PersonA  PersonB\par
}{\plain \fs16 \f1\fs16      .\par
}{\plain \fs16 \f1\fs16      .\par
}{\plain \fs16 \f1\fs16 0 0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Each pair of persons represents two people who know one another.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 9\par
}{\plain \fs16 \f1\fs16 1  2\par
}{\plain \fs16 \f1\fs16 1  3\par
}{\plain \fs16 \f1\fs16 2  4\par
}{\plain \fs16 \f1\fs16 3  5                    (picture of graph)\par
}{\plain \fs16 \f1\fs16 6  7\par
}{\plain \fs16 \f1\fs16 6  8\par
}{\plain \fs16 \f1\fs16 0  0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 3\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 5\par
}{\plain \fs16 \f1\fs16 1 2\par
}{\plain \fs16 \f1\fs16 1 5\par
}{\plain \fs16 \f1\fs16 2 3                     (picture of graph)\par
}{\plain \fs16 \f1\fs16 3 4\par
}{\plain \fs16 \f1\fs16 0 0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs24 \b 1995 Contest}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 1:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Micron just announced that it will be setting up a new office in Lehi. They need a method of making sure that \softline
the information they send to the parent company in Boise is correct. They have decided to use an even parity \softline
scheme.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Their even parity scheme works as follows. Information is sent in eight bit words. The first seven bits of each \softline
word contain data, and the last bit is chosen so that there are an even number of 1s in the word including the \softline
parity bit. For example, if the data was 0000100, a 1 would be put on the end of the word to make the number of \softline
1s in the word even. (00001001)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your job is to write a program that checks to see if an eight bit word has even parity. If it does, the program \softline
should output {\u8220\'93}correct{\u8221\'94}. If it does not, the program should output {\u8220\'93}incorrect{\u8221\'94}.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Examples:\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\fi-1440\li1440\tx720\tx1440 
{\plain \fs16 \f1\fs16 Sample input\ul0 \tab Sample output\par
}\pard \fs16\fi-1440\li1440\tx720\tx1440 
{\plain \fs16 \f1\fs16 11000110\ul0 \tab correct\par
}\pard \fs16\fi-1440\li1440\tx720\tx1440 
{\plain \fs16 \f1\fs16 00000000\ul0 \tab correct\par
}\pard \fs16\fi-1440\li1440\tx720\tx1440 
{\plain \fs16 \f1\fs16 01010111\ul0 \tab incorrect\par
}\pard \fs16\fi-1440\li1440\tx720\tx1440 
{\plain \fs16 \f1\fs16 10000000\ul0 \tab incorrect\par
}\pard \fs16
{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 2:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 An anagram is a word that can be constructed by rearranging the letters of another word. A sub-anagram is a word \softline
that can be constructed from another word, but not all of the letters from the first word need to be used. For \softline
example, the word {\u8220\'93}acm{\u8221\'94} is a sub-anagram of {\u8220\'93}camera{\u8221\'94}. The letters a, c, and m all appear in the word camera at \softline
least once. However, {\u8220\'93}creme{\u8221\'94} is not a sub-anagram because there is only one e in camera.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Write a program that determines if a word is a sub-anagram of another word. The program should accept as input \softline
two words. The program should then output if the second word is a sub-anagram of the first word. If the second \softline
word is a sub-anagram of the first, the program should output {\u8220\'93}yes{\u8221\'94}. If the second word is not a sub-anagram, \softline
the program should output {\u8220\'93}no{\u8221\'94}.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Examples:\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 Sample input\ul0 \tab \ul0 \tab Sample output\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 elephant plant\ul0 \tab \ul0 \tab yes\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 elephant appeal\ul0 \tab no\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 elephant plenty\ul0 \tab no\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 acm mac\ul0 \tab \ul0 \tab yes\par
}\pard \fs16
{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 3:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The kingdom of Aranor was torn in chaos. The king had just died and left no heirs. Three barons, Aldron, \softline
Balnador, and Cedric were all fighting for power, trying to gain supporters as fast as they could.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The land of Aranor is a given number of miles wide east to west, and a given number of miles north to south. In \softline
order to effectively farm the land, it was settled exactly one town per square mile (in a grid), although in \softline
some sections water over that area prevented settlement.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Every day each town that supported one of the barons would send a representative to each of the neutral towns \softline
that bordered it on the sides and the diagonals, to try and recruit new supporters from them.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 A neutral town would rally to whoever had the most representatives each day, staying neutral if there were two \softline
or more with the most representatives.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your job is to write a program that figures out who controls what after a certain amount of time. Your program \softline
should accept three numbers, one on each line. The first should be the distance in miles from east to west of \softline
the land, the second the miles north to south, and the third the number of days to simulate. These numbers will \softline
then be followed by a group of characters that represent the starting state for the land.\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\fi-720\li720\tx720 
{\plain \fs16 \f1\fs16 .\ul0 \tab Neutral town\par
}\pard \fs16\fi-720\li720\tx720 
{\plain \fs16 \f1\fs16 ~\ul0 \tab lake{\u8211\'96}no towns\par
}\pard \fs16\fi-720\li720\tx720 
{\plain \fs16 \f1\fs16 a\ul0 \tab town controlled by Aldron\par
}\pard \fs16\fi-720\li720\tx720 
{\plain \fs16 \f1\fs16 b\ul0 \tab town controlled by Balnador\par
}\pard \fs16\fi-720\li720\tx720 
{\plain \fs16 \f1\fs16 c\ul0 \tab town controlled by Cedric\par
}\pard \fs16
{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The following example shows how the towns will rally to the various leaders over several days. The land is 6 \softline
miles east to west and 5 miles north to south.\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\fi-8640\li8640\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 
{\plain \fs16 \f1\fs16 Starting\ul0 \tab First day\ul0 \tab Second day\ul0 \tab Third day\ul0 \tab Fourth day\ul0 \tab Fifth day\ul0 \tab Sixth day\par
}\pard \fs16\fi-8640\li8640\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 
{\plain \fs16 \f1\fs16 ......\ul0 \tab \ul0 \tab aaa...\ul0 \tab \ul0 \tab aaaacc\ul0 \tab \ul0 \tab aaaacc\ul0 \tab \ul0 \tab aaaacc\ul0 \tab \ul0 \tab aaaccc\ul0 \tab \ul0 \tab unchanged\par
}\pard \fs16\fi-7200\li7200\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200 
{\plain \fs16 \f1\fs16 .a....\ul0 \tab \ul0 \tab aaa.cc\ul0 \tab \ul0 \tab aaa.cc\ul0 \tab \ul0 \tab aaa.cc\ul0 \tab \ul0 \tab aaa.cc\ul0 \tab \ul0 \tab aaa.cc\par
}\pard \fs16\fi-7200\li7200\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200 
{\plain \fs16 \f1\fs16 ..~~.c\ul0 \tab \ul0 \tab ..~~cc\ul0 \tab \ul0 \tab .a~~cc\ul0 \tab \ul0 \tab aa~~cc\ul0 \tab \ul0 \tab aa~~cc\ul0 \tab \ul0 \tab aa~~cc\par
}\pard \fs16\fi-7200\li7200\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200 
{\plain \fs16 \f1\fs16 b...~.\ul0 \tab \ul0 \tab bb..~c\ul0 \tab \ul0 \tab bbbc~c\ul0 \tab \ul0 \tab bbbc~c\ul0 \tab \ul0 \tab bbbc~c\ul0 \tab \ul0 \tab bbbc~c\par
}\pard \fs16\fi-7200\li7200\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200 
{\plain \fs16 \f1\fs16 ......\ul0 \tab \ul0 \tab bb....\ul0 \tab \ul0 \tab bbb.cc\ul0 \tab \ul0 \tab bbb.cc\ul0 \tab \ul0 \tab bbb.cc\ul0 \tab \ul0 \tab bbb.cc\par
}\pard \fs16
{\plain \fs16 \f1\fs16 \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \par
}{\plain \fs16 \f1\fs16 For this problem, you should only output what has happened on the last day simulated, in the same format as it \softline
was entered. You may assume that the land will not be greater than 20 miles to a side.\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 Sample input\ul0 \tab \ul0 \tab Sample output\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 6\ul0 \tab \ul0 \tab \ul0 \tab aaaacc\par
}\sect \sectd \sbknone\marglsxn720\margrsxn720\headery1440\footery1440\endnhere\endnhere 
{\*\pnseclvl1\pnstart1\pnf1\pnhang{\pntxta {\u9656\'20}}}
{\*\pnseclvl2\pnstart1\pnf1\pnhang{\pntxta {\u9656\'20}}}
{\*\pnseclvl3\pnstart1\pnf1\pnhang{\pntxta {\u9656\'20}}}
{\*\pnseclvl4\pnstart1\pnf1\pnhang{\pntxta {\u9656\'20}}}
{\*\pnseclvl5\pnstart1\pnf1\pnhang{\pntxta {\u9656\'20}}}
{\*\pnseclvl6\pnstart1\pnf1\pnhang{\pntxta {\u9656\'20}}}
{\*\pnseclvl7\pnstart1\pnf1\pnhang{\pntxta {\u9656\'20}}}
{\*\pnseclvl8\pnstart1\pnf1\pnhang{\pntxta {\u9656\'20}}}
{\*\pnseclvl9\pnstart1\pnf1\pnhang{\pntxta {\u9656\'20}}}

\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 5\ul0 \tab \ul0 \tab \ul0 \tab aaa.cc\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 3\ul0 \tab \ul0 \tab \ul0 \tab aa~~cc\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 ......\ul0 \tab \ul0 \tab \ul0 \tab bbbc~c\par
}\pard \fs16\fi-2160\li2160\tx720\tx1440\tx2160 
{\plain \fs16 \f1\fs16 .a....\ul0 \tab \ul0 \tab \ul0 \tab bbb.cc\par
}\pard \fs16
{\plain \fs16 \f1\fs16 ..~~.c\par
}{\plain \fs16 \f1\fs16 b...~.\par
}{\plain \fs16 \f1\fs16 ......\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 4:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Jane needs to run extension cords from electrical sockets to several computers in a large room. None of the \softline
extension cords are long enough, so she will have to combine several cords to reach each computer. \softline
Unfortunately, choosing which cords to use is not easy to do without help.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your task is to write a program to help Jane choose from a set of extension cords that will exactly span the \softline
distance required.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program must accept three lines of input:\par
}{\plain \fs16 \f1\fs16 >The first line specifies the distance to be covered (ranges from 1 - 500 feet)\par
}{\plain \fs16 \f1\fs16 >The second line specifies the number of extension cords. (ranges from 1 to 9 cord segments)\par
}{\plain \fs16 \f1\fs16 >The third line is a list of extension cord lengths. (each ranges from 1 - 100 feet).\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program should output one set of cord lengths (in any order) which add up to the exact distance to be \softline
covered. If no group of cord lengths add up to the distance to be covered, then the program should print: {\u8220\'93}No \softline
solution{\u8221\'94}.\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\fi-2880\li2880\tx720\tx1440\tx2160\tx2880 
{\plain \fs16 \f1\fs16 Sample input\ul0 \tab \ul0 \tab \ul0 \tab output\par
}\pard \fs16\fi-2880\li2880\tx720\tx1440\tx2160\tx2880 
{\plain \fs16 \f1\fs16 21\ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab 8 5 8\par
}\pard \fs16
{\plain \fs16 \f1\fs16 5\par
}{\plain \fs16 \f1\fs16 8 2 1 5 8\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\fi-2880\li2880\tx720\tx1440\tx2160\tx2880 
{\plain \fs16 \f1\fs16 Sample input\ul0 \tab \ul0 \tab \ul0 \tab output\par
}\pard \fs16\fi-2880\li2880\tx720\tx1440\tx2160\tx2880 
{\plain \fs16 \f1\fs16 134\ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab 78 34 8 10 4\par
}\pard \fs16
{\plain \fs16 \f1\fs16 8\par
}{\plain \fs16 \f1\fs16 78 34 87 34 8 55 10 4\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\fi-2880\li2880\tx720\tx1440\tx2160\tx2880 
{\plain \fs16 \f1\fs16 Sample input\ul0 \tab \ul0 \tab \ul0 \tab output\par
}\pard \fs16\fi-2880\li2880\tx720\tx1440\tx2160\tx2880 
{\plain \fs16 \f1\fs16 25\ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab No solution.\par
}\pard \fs16
{\plain \fs16 \f1\fs16 5\par
}{\plain \fs16 \f1\fs16 8 9 3 7 2\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 5:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 On a rainy evening at the Sandy Sandwich shop, Sam is managing the shop all by himself. It takes him four \softline
minutes to prepare each sandwich ordered; he makes up for his slowness by using an astonishingly unfair \softline
algorithm for serving customers. When a customer orders a sandwich, if Sam is not doing anything, he makes the \softline
sandwich. If he is making another sandwich, he puts the new order on a spindle. When he finishes a sandwich, he \softline
takes the top order from the spindle and makes that sandwich. You can see that a customer who cam in a the \softline
beginning of a flurry of customers might have to wait a very long time.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program should accept times (as integers, starting at time 0) at which customers order sandwiches. Keep \softline
track of Sam{\u8217\'92}s order handling, and every time Same catches up, display the average and maximum customer waiting \softline
time since he last caught up. Understand an order time of -1 as ending the input for the problem. In case of a \softline
tie, when a customer places an order at the same time Sam finishes a sandwich, Sam starts on the new customer{\u8217\'92}s \softline
order instead of taking an order from the spindle.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 For example, suppose the input is\par
}{\plain \fs16 \f1\fs16 0\par
}{\plain \fs16 \f1\fs16 2\par
}{\plain \fs16 \f1\fs16 5\par
}{\plain \fs16 \f1\fs16 6\par
}{\plain \fs16 \f1\fs16 12\par
}{\plain \fs16 \f1\fs16 22\par
}{\plain \fs16 \f1\fs16 22\par
}{\plain \fs16 \f1\fs16 23\par
}{\plain \fs16 \f1\fs16 -1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The first customer{\u8217\'92}s sandwich is finished at time 4; the second sandwich is finished at time 8; the fourth \softline
customer{\u8217\'92}s sandwich is finished at time 12; the fifth customer gets his sandwich at time 16; and the third \softline
customer finally gets his at time 20. At this point, Sam is caught up, so the program should report an average \softline
waiting time of 7.0 minutes and a maximum wait of 15 minutes. The last three customers make another flurry; the \softline
sixth waits 4 minutes, the eighth gets his sandwich at time 30 for a wait of 7 minutes, and the seventh customer \softline
waits 12 minutes. Thus this bunch has an average wait of 7.67 minutes and a maximum wait of 12 minutes.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You may assume that there will be at least 1 and no more than 29 sandwiches entered.\par
}{\plain \fs16 \f1\fs16 \tab \tab \tab \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs24 \b 1996 Contest}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 }{\plain \fs16 \b\f1\fs16 Problem 1\par
}{\plain \fs16 \b\f1\fs16                                 ---------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  \par
}{\plain \fs16 \f1\fs16 The Acme Component Manufacturing Company (ACM) produces computer components  for other companies.  In order to \softline
keep track of what is inside each box that is shipped and where it is going, they use a three digit code on the \softline
package, easily readable by a scanner.  Unfortunately, ACM's main competitor, Barry's Subsystems (BS), has \softline
hacked into ACM's mainframe, and the scanning program was lost!  In a fit of panic, ACM's CEO has hired you to \softline
reconstruct the scanning program so they can continue business.\par
}{\plain \fs16 \f1\fs16  \par
}{\plain \fs16 \f1\fs16 Each package contains a three digit code, xyz, where x, y, and z are between 1 and 9.  Here is the key:\par
}{\plain \fs16 \f1\fs16  \par
}{\plain \fs16 \f1\fs16 x: Destination                 y: Contents             z: # ordered\par
}{\plain \fs16 \f1\fs16 1 Microsquash                  1 Widgets\par
}{\plain \fs16 \f1\fs16 2 Picard Bell                  2 Gadgets\par
}{\plain \fs16 \f1\fs16 3 Base 13 Research Company     3 Woozats\par
}{\plain \fs16 \f1\fs16 4 AT&V                         4 Thingamajigs\par
}{\plain \fs16 \f1\fs16 5 Panaromic                    5 Whatzits\par
}{\plain \fs16 \f1\fs16 6 Rain Microsystems            6 Integral Processors\par
}{\plain \fs16 \f1\fs16 7 Million Industries           7 Tristors\par
}{\plain \fs16 \f1\fs16 8 Dandy's Radio Shock          8 Ristors\par
}{\plain \fs16 \f1\fs16 9 Fruit Basket Hardware        9 Capitors\par
}{\plain \fs16 \f1\fs16                                                                    \par
}{\plain \fs16 \f1\fs16 The scanner is still working and will input the three digit code into your program, which should return output \softline
in the following format:\par
}{\plain \fs16 \f1\fs16  \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input: 868\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:  Dandy's Radio Shock: 8 Integral Processors\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input: 454\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output: AT&V: 4 Whatzits\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Note:  Your program must output ONLY ONE LINE, and it must be in exactly the format shown in the examples.\par
}{\plain \fs16 \f1\fs16  \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 }{\plain \fs16 \b\f1\fs16 Problem 2\par
}{\plain \fs16 \b\f1\fs16                                 ---------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Murphy's Car Wash in Park City has been getting complaints.  Some of their customers are quite absent-minded.  \softline
After waiting in line to get their Porches and BMWs to the washing bay, they discover that they don't have \softline
anything smaller than a $100 bill.  Since the coin changer only accepts one-dollar bills and five-dollar bills, \softline
they have to go to the bank to get some small change and wait in the line again.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 In order to keep his customers happy, Murphy has decided to build a new kind of coin changer.  Instead of just \softline
taking small bills, he would like to connect directly to the local bank and allow his customers to withdraw \softline
money from their accounts in the form of coins they can use in the car wash machines.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You have been given the job of programming this new device, called the Automatic Coin Machine (ACM), so that it \softline
outputs the proper number of coins when a user requests them.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The input to your program will be a floating point number.  It will contain exactly two decimal places and be \softline
less than 100 dollars.  (Park City car washes are pretty expensive, too.)  Your program should output the \softline
minimum number of coins required to create that total amount of money.  (Assume that the ACM contains only \softline
quarters, dimes, nickels, and pennies.)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input: 6.89\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output: 32\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input: 0.78\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output: 6\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Note:  Your program must output ONLY ONE LINE, and it must be in exactly the\par
}{\plain \fs16 \f1\fs16 format shown in the examples.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 }{\plain \fs16 \b\f1\fs16 Problem 3\par
}{\plain \fs16 \b\f1\fs16                                 ---------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The Allied Commande Militaire (ACM) is planning to send supplies to the troops in Bosnia.  These supplies are \softline
dropped from airplanes, and each plane carries two large packages.  The ACM has many different sizes of packages \softline
that can be dropped, so they can provide supplies for various numbers of soldiers. They assume that the supplies \softline
will be used by troops who are working in an area that is perfectly circular and that the distribution of troops 
on the ground is uniform.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The ACM leaders who ordered the drop wish to evaluate the results of their efforts, and that is where you come \softline
in.  Each of the packages contains a homing device that automatically reports the exact point of landing.  Since\par
}{\plain \fs16 \f1\fs16 the radius of the area to be supplied by each one is known, it is possible to determine just how well the \softline
airplane pilots could aim.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 For this problem, you are to write a program that does only one part of the calculation necessary for this \softline
evaluation.  Your program will input the point of impact of a package and the radius of its circle of coverage.  \softline
It should output two things on separate lines:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 a. The number of points of intersection of the circumferences of the two circles. If the circles do not \softline
intersect, this should be 0; if the circles cross one another, it should be 2; if the circles are tangent to one \softline
another, the output should be 1.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 b. Whether or not one of the circles is completely enclosed by the other one. Your program must output either \softline
"inside" or "not inside"\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Note that the center of one of the circles may lie within the other circle, but unless all of the area of one \softline
circle is contained in the area of the other, the correct output is "not inside".  Also, one circle could be \softline
inside another even if they are tangent.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input to your program will be in the format:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 X1 Y1 R1\par
}{\plain \fs16 \f1\fs16 X2 Y2 R2\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Where X1,Y1,R1 specify the X and Y coordinates of the first package, and R1 specifies the radius of the first \softline
package.  X2, Y2, and R2 specify the same things for the second package.  All of these are floating point \softline
values.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1                       Example 2\par
}{\plain \fs16 \f1\fs16 ---------                       ---------\par
}{\plain \fs16 \f1\fs16 input:                          input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         0  0  3                         0  0    3\par
}{\plain \fs16 \f1\fs16         0  0  1                         0  2.5  1\par
}{\plain \fs16 \f1\fs16                                 \par
}{\plain \fs16 \f1\fs16 output:                         output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         0                               2\par
}{\plain \fs16 \f1\fs16         inside                          not inside\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Note: Your program must output ONLY TWO LINES, and they must be in exactly the format shown in the examples.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 }{\plain \fs16 \b\f1\fs16 Problem 4\par
}{\plain \fs16 \b\f1\fs16                                 ---------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 When the king of Disorgania died, his sons were left with the task of splitting up his gold figurines and \softline
bullion bars between them.  Since neither one trusted the other, they commanded Merlin, the court wizzard, to \softline
decide upon a method of comparing the weights of the gold in such a way that they each got exactly the same \softline
amount.  Merlin knew that if he did not perform his task properly, the prince who received the lesser amount of \softline
treasure would have him beheaded.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 With that incentive, the wizzard invented a device that he called an Avarice Control Machine (ACM).  (Of course, \softline
he didn't tell either prince about that or his head would certainly have rolled!)  In reality, the ACM was \softline
simply a balance scale.  It had two dishes upon which gold objects were placed. If the sums of the objects on \softline
the two dishes was equal, the two dishes would be the same level; i.e., they would balance.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The problem with the ACM was that it took so long to find a combination of objects that would balance.  What \softline
Merlin needed was a computer program to make that decision quickly so he didn't have to try so many combinations \softline
in search of a solution. For this question, you are to write that program.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program is to accept as input a number N, which is how many gold objects you have.  The program should then \softline
accept as input N weight values.  Each weight value will be given to you on a separate line.  Your program \softline
should then output which objects that should be placed in each dish so that the scale will be balanced.  You may \softline
assume that there will always be a solution such that the scale will balance, that the number of objects will be \softline
less than 20, and that each weight value is a whole number (i.e. no fractional pounds).  It does not matter in \softline
which order the weights are listed in your output.  If there are more than one possible solution, only one \softline
solution needs to be given.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1                       Example 2\par
}{\plain \fs16 \f1\fs16 ---------                       ---------\par
}{\plain \fs16 \f1\fs16 input:                          input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         4                               6\par
}{\plain \fs16 \f1\fs16         7                               5\par
}{\plain \fs16 \f1\fs16         2                               12\par
}{\plain \fs16 \f1\fs16         6                               7\par
}{\plain \fs16 \f1\fs16         1                               1\par
}{\plain \fs16 \f1\fs16                                         1\par
}{\plain \fs16 \f1\fs16                                         12\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:                         output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         Dish1: 7 1                      Dish1: 7 12\par
}{\plain \fs16 \f1\fs16         Dish2: 6 2                      Dish2: 1 12 1 5\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Note: Your program must output ONLY TWO LINES, and they must be in exactly the format shown in the examples.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 }{\plain \fs16 \b\f1\fs16 Problem 5\par
}{\plain \fs16 \b\f1\fs16                                 ---------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The computing community was terribly disappointed that the world's best chess program, IBM's Deep Blue, was \softline
soundly defeated by Garry Kasparov at the annual ACM Convention in Philadelphia last month.  They have decided \softline
to invest $100M over the next year to build a faster machine, to be called the Automatic Chess Machine (ACM), \softline
and to write better software.  You have been invited to participate in that software development effort.  Your \softline
job is to write the code that controls movements of the knight.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Of all the chess pieces, the knight is the most interesting.  It is the only piece that can hop over other \softline
pieces.  Its move is shaped like the letter L. It moves two squares in one direction, and then one square in a \softline
perpendicular direction.  The knight cannot move off the edge of the board and the knight must land in an empty \softline
square for the purpose of this problem.  Here are some sample knight moves on a 5x5 board:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16     ---------------------         ---------------------\par
}{\plain \fs16 \f1\fs16     |   |   | K |   |   |         |   |   |   |   |   |\par
}{\plain \fs16 \f1\fs16     ---------------------         ---------------------\par
}{\plain \fs16 \f1\fs16     |   |   |   |   |   |         |   | K |   |   |   |\par
}{\plain \fs16 \f1\fs16     ---------------------         ---------------------\par
}{\plain \fs16 \f1\fs16     |   | K |   |   |   |         |   |   |   | K |   |\par
}{\plain \fs16 \f1\fs16     ---------------------         ---------------------\par
}{\plain \fs16 \f1\fs16     |   |   |   |   |   |         |   |   |   |   |   |\par
}{\plain \fs16 \f1\fs16     ---------------------         ---------------------\par
}{\plain \fs16 \f1\fs16     |   |   |   |   |   |         |   |   |   |   |   |\par
}{\plain \fs16 \f1\fs16     ---------------------         ---------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16     (K is where the knight started and/or ended.)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Using these rules, a knight could move to as many as eight different places in a single move:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16     ---------------------\par
}{\plain \fs16 \f1\fs16     |   | 1 |   | 2 |   |\par
}{\plain \fs16 \f1\fs16     ---------------------\par
}{\plain \fs16 \f1\fs16     | 8 |   |   |   | 3 |\par
}{\plain \fs16 \f1\fs16     ---------------------\par
}{\plain \fs16 \f1\fs16     |   |   | K |   |   |\par
}{\plain \fs16 \f1\fs16     ---------------------\par
}{\plain \fs16 \f1\fs16     | 7 |   |   |   | 4 |\par
}{\plain \fs16 \f1\fs16     ---------------------\par
}{\plain \fs16 \f1\fs16     |   | 6 |   | 5 |   |\par
}{\plain \fs16 \f1\fs16     ---------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your problem: Given a chess board with some other immobile pieces on it, report the minimum number of moves it \softline
takes the knight to move from square A to square B.  The board that you will use is 8x8 squares.  Input will be \softline
in the form of 8 lines of 8 characters which represent the state of the board. Periods represent empty squares, \softline
#'s represent squares with other pieces in them, and the starting point of the knight is the letter A.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output should be an integer reporting the minimum number of moves it will take the knight to get to square B.  \softline
There will always be a solution for the cases that we will use to test your program.\par
}{\plain \fs16 \f1\fs16 \tab \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input:\par
}{\plain \fs16 \f1\fs16         ........\par
}{\plain \fs16 \f1\fs16         .#......\par
}{\plain \fs16 \f1\fs16         ...#B...\par
}{\plain \fs16 \f1\fs16         ..A.#...\par
}{\plain \fs16 \f1\fs16         .....##.\par
}{\plain \fs16 \f1\fs16         ........\par
}{\plain \fs16 \f1\fs16         ....#...\par
}{\plain \fs16 \f1\fs16         ........\par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16         1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input:\par
}{\plain \fs16 \f1\fs16         ........\par
}{\plain \fs16 \f1\fs16         ........\par
}{\plain \fs16 \f1\fs16         ...#....\par
}{\plain \fs16 \f1\fs16         .A......\par
}{\plain \fs16 \f1\fs16         ..B.....\par
}{\plain \fs16 \f1\fs16         #....#..\par
}{\plain \fs16 \f1\fs16         ..#.....\par
}{\plain \fs16 \f1\fs16         ........\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         4\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Note:  Your program must output ONLY ONE LINE, and it must be in exactly the format shown in the examples.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs24 \b 1997 Contest}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 }{\plain \fs16 \b\f1\fs16 Problem 1\par
}{\plain \fs16 \b\f1\fs16                                 ---------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 It's March and the NCAA basketball tournament is underway.  The bookies in Las Vegas (and Salt Lake City, \softline
believe it or not) are always looking for ways to better predict the outcome of upcoming games.  You've decided \softline
that you'll write a program that makes predictions with enough accuracy that the betting industry will pay big \softline
bucks to purchase it (and hopefully the Mafia won't be disappointed enough to pay you a visit).\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The principle that your program will use is similar to the one implemented in the Magic Eight Ball toy, which is \softline
based upon cosmic rays and other random phenomena.  You have decided that your program will allow the user to \softline
input a question that can be answered either "Yes!" or "No!".  Your program will go through the question and \softline
count the vowels.  If there are an odd number of vowels, the program will output "Yes!"; if there are an even \softline
number of vowels, the program will output "No!".\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input questions will be no longer than one line, which will contain fewer than 80 characters.  Vowels are \softline
defined to be upper or lower case a, e, i, o, u, and y.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The only output will be one of the strings shown above followed by a return character.  Your program should NOT \softline
prompt the user for a question.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Here are some examples:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         Will the University of Utah win the NCAA basketball tournament?\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16         Yes!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         Does BYU have a basketball team?\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16         No!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 }{\plain \fs16 \b\f1\fs16 Problem 2\par
}{\plain \fs16 \b\f1\fs16                                 ---------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Three brothers have a serious problem.  Their grandmother loves to bake cookies for them.  That's the good news.  \softline
The bad news is that she bakes a different number of cookies each time, and she seals each batch in plastic.\par
}{\plain \fs16 \f1\fs16 The other news is that she sends several plastic packages of cookies to them in the mail every few weeks.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 To complicate matters further, the three brothers are extremely jealous of one another.  If one brother gets \softline
more cookies than another, they always get in a fight.  Their mother, in her infinite wisdom, has decided that \softline
the brothers\par
}{\plain \fs16 \f1\fs16 won't be allowed to open any cookie package unless the number of cookies inside is a multiple of three.  The \softline
rest of the packages will be sent to the local homeless shelter.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Although sympathetic to the needs of the homeless, the brothers are very greedy and would like to keep more of \softline
the cookies for themselves.  They convince their mother to allow them to open up several cookie packages as long\par
}{\plain \fs16 \f1\fs16 as the TOTAL NUMBER of cookies is a multiple of three.  In order to get as many cookies as possible, the \softline
brothers decide to write a computer program that figures out how many cookies they can have.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You are to write this program for them.  Your program will input a list of integers corresponding to the number \softline
of cookies in 10 separate packages.  It is to output the maximum number of cookies they each can have, assuming \softline
they open only packages with a total number of cookies that is a multiple of three. You may assume that each of \softline
the 10 numbers is greater than zero.\par
}{\plain \fs16 \f1\fs16  \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         1 2 3 4 5 6 7 8 9 10\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16         18\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         1 2 3 3 2 1 1 2 3 5\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         7\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 }{\plain \fs16 \b\f1\fs16 Problem 3\par
}{\plain \fs16 \b\f1\fs16                                 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Several Avon salesmen are in the process of dividing up territory in Salt Lake City.  They've decided that the \softline
simplest approach would be for each of them to be responsible for a rectangular area within the city.  Rather \softline
than strictly separating their territories, however, they will allow some overlap, but they will split the \softline
proceeds of any sales in the common areas.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 This leaves them with the problem of determining the amount of overlap between territories.  They decide to \softline
write a computer program that inputs coordinates of two rectangular areas in the city and outputs the amount of \softline
area that is common to those two rectangles.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Since this is Utah, all streets are numbered relative to the Brigham Young Monument.  To simplify their task, \softline
they decide to input street numbers as positive or negative integers, with north and east being positive, south \softline
and west being negative.  Thus, 2100 East Street would be entered as 21, and 3000 South Street would be entered \softline
as -30.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The program will input the streets on two opposite corners of each of the two rectangular areas.  For each \softline
corner, the street that goes north and south will be entered first, followed by the street that goes east and \softline
west.  Note that an area could be entered in four different ways, depending upon which corners are chosen and \softline
the order in which the corners are listed.  For example, the area bordered by 100 South, 200 East, 3400 South, \softline
500 West could be entered in any of the following four ways:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         2 -34 -5 -1\par
}{\plain \fs16 \f1\fs16         -5 -1 2 -34\par
}{\plain \fs16 \f1\fs16         -5 -34 2 -1\par
}{\plain \fs16 \f1\fs16         2 -1 -5 -34\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program is to output only a single integer - the number of blocks that are common to the rectangles.  If \softline
the rectangles do not intersect, the program should output 0.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         2 -34 -5 -1\par
}{\plain \fs16 \f1\fs16         0 -59 -7 -21\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         65\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         2 -34 -5 -1\par
}{\plain \fs16 \f1\fs16         5 -50 2 -34\par
}{\plain \fs16 \f1\fs16         \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 }{\plain \fs16 \b\f1\fs16 Problem 4\par
}{\plain \fs16 \b\f1\fs16                                 ---------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The Acme Tiling Company has hired you to write a program that helps them order tiles for their jobs.  They need \softline
to be able to draw maps of a house and use these maps to figure out how many tiles are needed to cover the floor \softline
of a room.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program will input three things:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 1. The size of the house.  You may assume the house is always rectangular in shape with integer values for width \softline
and length.  The width (W) dimension will precede the length (L) when input.  The units of length and width are \softline
the size of the tiles, which are 1 unit square.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 2. An array of characters that represents the house.  This will be input as L rows of W characters.  In that 
array, periods indicate empty spaces and |'s indicate walls.  The array will be at most 30 by 30 characters.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 3. The coordinates of some point in the room to be tiled.  The point will be the horizontal (H) and vertical (V) \softline
distance from the upper left corner of the house.  (The location of the corner is 0 0.)  The horizontal distance \softline
will be input first.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program should output the number of tiles required to fill the room.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Here is an example of input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         10 8\par
}{\plain \fs16 \f1\fs16         |||||..|||\par
}{\plain \fs16 \f1\fs16         |......|.|\par
}{\plain \fs16 \f1\fs16         |..|...|..\par
}{\plain \fs16 \f1\fs16         ||||..||||\par
}{\plain \fs16 \f1\fs16         ....||...|\par
}{\plain \fs16 \f1\fs16         |...||....\par
}{\plain \fs16 \f1\fs16         |...||...|\par
}{\plain \fs16 \f1\fs16         ||||||||||\par
}{\plain \fs16 \f1\fs16         4 2\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 This house is 10 units wide and 8 units long.  It contains 4 rooms that are not connected in any way.  The room \softline
to be tiled is the one at the top of the picture, and 15 tiles will be necessary to cover the floor.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Note that some of the dots are along the outside wall (indicating a door); those should be included in the space \softline
defined for a room.  Note also that dots are defined to be in the same room only if they are adjacent to other \softline
dots in the room either horizontally or vertically.  Dots that are only diagonally adjacent to other dots are \softline
not considered to be in the same room.  Thus, the room at the lower left in the picture above is not part of the \softline
one at the top of the picture.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         8 8\par
}{\plain \fs16 \f1\fs16         ..||||..\par
}{\plain \fs16 \f1\fs16         ..|..|..\par
}{\plain \fs16 \f1\fs16         ..|..|..\par
}{\plain \fs16 \f1\fs16         ..|..|..\par
}{\plain \fs16 \f1\fs16         ..|..|..\par
}{\plain \fs16 \f1\fs16         ..|..|..\par
}{\plain \fs16 \f1\fs16         ..|..|..\par
}{\plain \fs16 \f1\fs16         ..||||..\par
}{\plain \fs16 \f1\fs16         3 1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         12\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         8 10\par
}{\plain \fs16 \f1\fs16         .|..|.|.\par
}{\plain \fs16 \f1\fs16         |.||.|.|\par
}{\plain \fs16 \f1\fs16         |..|||.|\par
}{\plain \fs16 \f1\fs16         |......|\par
}{\plain \fs16 \f1\fs16         |..|.|||\par
}{\plain \fs16 \f1\fs16         |......|\par
}{\plain \fs16 \f1\fs16         |.|.||.|\par
}{\plain \fs16 \f1\fs16         |...||||\par
}{\plain \fs16 \f1\fs16         .||.|...\par
}{\plain \fs16 \f1\fs16         ...|||.|\par
}{\plain \fs16 \f1\fs16         1 1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         27\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\f1\fs16                                 Problem 5\par
}{\plain \fs16 \b\f1\fs16                                 ---------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Now that everyone has a Web page, one of the big worries in life is how to find information that we'd like to \softline
see.  One way to do that is by setting up links from our own Web page to the pages of others.  If there are \softline
enough links, we can go from page to page and eventually find what we're looking for.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Consider the following hypothetical situation.  Suppose there are 26 students in a class, all of whom have Web \softline
pages.  Suppose in addition that each student is allowed to have only two links to pages of other students.  Of \softline
course, they all have the maximum number of links.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The problem you must solve in this question is to figure out whether or not a particular student can get to \softline
another student's Web page using only the links that have been set up.  Your program will input a list of 26 \softline
student names, along with their links.  The program will then input two student names and output either "Can get \softline
there." or "Can't get there.", depending upon whether or not the first student can access the second student's \softline
Web page using only the links contained in the list.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 For simplicity, the student names will be single upper case letters.  The links will be input as lines of three \softline
names: source student followed by the destination of that student's two links.  The format of the input will be\par
}{\plain \fs16 \f1\fs16 three characters separated by single spaces and followed by a line feed.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Although the examples listed below are in alphabetical order, the students may be listed in any order, but each \softline
will appear exactly once.  The same link will not appear twice on the same student's page, nor will there be any \softline
self links.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 SPECIAL NOTE: If your program runs more than one minute, the judges will terminate their test.  If it doesn't \softline
complete within that time, we will assume that the program is in an infinite loop.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         A B C\par
}{\plain \fs16 \f1\fs16         B C D\par
}{\plain \fs16 \f1\fs16         C D E\par
}{\plain \fs16 \f1\fs16         D E F\par
}{\plain \fs16 \f1\fs16         E F G\par
}{\plain \fs16 \f1\fs16         F G H\par
}{\plain \fs16 \f1\fs16         G H I\par
}{\plain \fs16 \f1\fs16         H I J\par
}{\plain \fs16 \f1\fs16         I H G\par
}{\plain \fs16 \f1\fs16         J G F\par
}{\plain \fs16 \f1\fs16         K F E\par
}{\plain \fs16 \f1\fs16         L E D\par
}{\plain \fs16 \f1\fs16         M D C\par
}{\plain \fs16 \f1\fs16         N C B\par
}{\plain \fs16 \f1\fs16         O B A\par
}{\plain \fs16 \f1\fs16         P Q R\par
}{\plain \fs16 \f1\fs16         Q R S\par
}{\plain \fs16 \f1\fs16         R S T\par
}{\plain \fs16 \f1\fs16         S T U\par
}{\plain \fs16 \f1\fs16         T U V\par
}{\plain \fs16 \f1\fs16         U V W\par
}{\plain \fs16 \f1\fs16         V W X\par
}{\plain \fs16 \f1\fs16         W X Y\par
}{\plain \fs16 \f1\fs16         X Y Z\par
}{\plain \fs16 \f1\fs16         Y Z A\par
}{\plain \fs16 \f1\fs16         Z P Q\par
}{\plain \fs16 \f1\fs16         K J\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         Can get there.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         A B C\par
}{\plain \fs16 \f1\fs16         B C D\par
}{\plain \fs16 \f1\fs16         C D E\par
}{\plain \fs16 \f1\fs16         D E F\par
}{\plain \fs16 \f1\fs16         E F G\par
}{\plain \fs16 \f1\fs16         F G H\par
}{\plain \fs16 \f1\fs16         G H I\par
}{\plain \fs16 \f1\fs16         H I J\par
}{\plain \fs16 \f1\fs16         I H G\par
}{\plain \fs16 \f1\fs16         J G F\par
}{\plain \fs16 \f1\fs16         K F E\par
}{\plain \fs16 \f1\fs16         L E D\par
}{\plain \fs16 \f1\fs16         M D C\par
}{\plain \fs16 \f1\fs16         N C B\par
}{\plain \fs16 \f1\fs16         O B A\par
}{\plain \fs16 \f1\fs16         P Q R\par
}{\plain \fs16 \f1\fs16         Q R S\par
}{\plain \fs16 \f1\fs16         R S T\par
}{\plain \fs16 \f1\fs16         S T U\par
}{\plain \fs16 \f1\fs16         T U V\par
}{\plain \fs16 \f1\fs16         U V W\par
}{\plain \fs16 \f1\fs16         V W X\par
}{\plain \fs16 \f1\fs16         W X Y\par
}{\plain \fs16 \f1\fs16         X Y Z\par
}{\plain \fs16 \f1\fs16         Y Z A\par
}\sect \sectd \sbknone\marglsxn720\margrsxn720\headery1440\footery1440\endnhere\endnhere 
{\*\pnseclvl1\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl2\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl3\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl4\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl5\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl6\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl7\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl8\pnstart1\pnf1{\pntxta {\u9656\'20}}}
{\*\pnseclvl9\pnstart1\pnf1{\pntxta {\u9656\'20}}}

\pard \fs16
{\plain \fs16 \f1\fs16         Z P Q\par
}{\plain \fs16 \f1\fs16         J K\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         Can't get there.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs24 \b 1998 Contest}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\ul\f1\fs16 Problem 1:}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 A local charity organization has been having a contest to see which of their agents can collect the most \softline
donations.  As the contest draws to a close, bags full of coins have been arriving at the judge's desk.  The \softline
contest judge, being the lazy sort that a contest judge is, doesn't want to be bothered with totaling up the \softline
sums of money and comparing the bags, so he has asked you to help out by writing a program to compare bags full \softline
of coins.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The program you are to write will determine which of two bags is worth more. You will be given the number of \softline
pennies, nickels, dimes, quarters, and half dollars that are in each bag, and you are to report which bag has \softline
more money, and by how much.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input: The input to your program will be 10 numbers.  The first five correspond to the coins in bag 1, and the \softline
second five correspond to the coins in bag 2.  The five numbers for each bag represent, in this order, the \softline
number of pennies, nickels, dimes, quarters, and half dollars in the bag.  Do not prompt for input!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output: You are to report either "The bags are the same", or "Bag N has X cents more.", where 'N' is the number \softline
of the bag with more money, and 'X' is how much more money there is in this bag than in the other bag.  See \softline
below for an example.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16      3 5 9 2 4\par
}{\plain \fs16 \f1\fs16      8 11 3 1 5\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16      The bags are the same.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16     10 12 97 3 5\par
}{\plain \fs16 \f1\fs16     678 6 15 0 10\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16     Bag 1 has 7 cents more.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 }{\plain \fs16 \b\f1\fs16 Problem 2\par
}{\plain \fs16 \b\f1\fs16                                 ---------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 A local company has offered to hire you to help you create an operating system which will compete with Microsoft \softline
Windows.  But before they give you the job, you must show them that you are a savvy programmer.  They have \softline
devised a simple test to see if you understand how file systems work.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your task is to write a program which will take a relative path, and output an absolute path.  A relative path \softline
is one that contains . and .. directory names. The rules they gave you for converting a relative path to an \softline
absolute path are quite simple.  Apply rule one to every part of the path, then apply rule two,\par
}{\plain \fs16 \f1\fs16 and so on:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 1.  /name -- keep as is.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 2.  /.    -- remove both the slash and the dot\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 3.  /../  -- remove both dots and slashes, and remove the previous name.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 4.  /..   -- remove both dots and the slash, and remove the previous name.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input to your program will be a pathname consisting of slashes, relative names . or .., and directory names.  \softline
Normal directory names will only consist of letters, and you are guaranteed to not have two slashes next to each \softline
other. At most, an input path will be 80 characters long.  All input paths begin with a /name and no sequence of \softline
/.. characters will require you to back up past this beginning slash.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The output should be the smallest equivalent path, and should contain no . or .. sequences.  (Follow the above \softline
rules only.)  Look carefully at the following examples.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      /windows/system/./../../fooled/ya\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      /fooled/ya\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      /home/usr/local/bin/../gnu/bin/./././.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      /home/usr/local/gnu/bin/\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 }{\plain \fs16 \b\f1\fs16 Problem 3\par
}{\plain \fs16 \b\f1\fs16                                 ---------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You've probably read the story of the Trojan Horse, so I won't repeat it here. The moral to the story is that \softline
things aren't always what they appear to be. In the world of computer security, a "Trojan Horse" is data that is \softline
passed across a computer network that contains information that isn't obvious to a casual observer.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 For example, let's say you wanted to help your old buddy Bill break out of jail at some hour of a particular \softline
day.  You might arrange to send him an email with the word "Bill" included some number of times, and he would \softline
know that the number of occurrences of that word would indicate the hour of the break-out. For example, if the \softline
word "Bill" was there 4 times, you'd be there at 4:00 am to blow up the door of the jail.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 This problem involves a similar Trojan Horse, except the input will be a matrix (2-dimensional array) of \softline
characters plus a key word that you are to search for.  The output will be the number of times you find the key \softline
word in the matrix.  The catch is that the word may be written left to right, right to left, top to bottom, \softline
bottom to top, or diagonally (up or down and left or right).\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 All letters in the array will be upper case alphas.  The array will always be 8 characters by 8 characters.  \softline
Letter(s) may be shared between two occurrences of the word.  A palindrome will count as two occurrences of the \softline
word since it appears in both directions.  (A palindrome is a word that reads the same frontwards and backwards \softline
- like BOB.)  Here are two examples:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      XBXXXXXX\par
}{\plain \fs16 \f1\fs16      XXIXXXXX\par
}{\plain \fs16 \f1\fs16      XXXLXXXX\par
}{\plain \fs16 \f1\fs16      XXXXLXXX\par
}{\plain \fs16 \f1\fs16      XXXXXIXX\par
}{\plain \fs16 \f1\fs16      XXXXXXBX\par
}{\plain \fs16 \f1\fs16      XXXXXXXX\par
}{\plain \fs16 \f1\fs16      XXXXXXXX\par
}{\plain \fs16 \f1\fs16      BILL\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      2\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      XXXXXXXX\par
}{\plain \fs16 \f1\fs16      XXXXXXXX\par
}{\plain \fs16 \f1\fs16      XBOBXXXX\par
}{\plain \fs16 \f1\fs16      XBOBXXXX\par
}{\plain \fs16 \f1\fs16      XBOBXXXX\par
}{\plain \fs16 \f1\fs16      XXXXXXXX\par
}{\plain \fs16 \f1\fs16      XXXXXXXX\par
}{\plain \fs16 \f1\fs16      XXXXXXXX\par
}{\plain \fs16 \f1\fs16      BOB\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      10\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 }{\plain \fs16 \b\f1\fs16 Problem 4\par
}{\plain \fs16 \b\f1\fs16                                 ---------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 For a suspicious person, 1998 is a really scary year.  The most dreaded event that such a person can face is \softline
Friday the 13th, and 1998 has three of them!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 It's important form some people to know ahead of time when a Friday the 13}{\plain \fs16 \super\f1\fs16 th}{\plain \fs16 \f1\fs16  will occur so they can avoid making \softline
important business deals that might come to fruition on one of those days and avoid conceiving a child that \softline
might be born at such a horrible time, so you have been asked to write a program that figures out how many \softline
Friday the 13ths there are in a particular year.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Just in case you've forgotten, there are 365 days in a year, except that leap years have 366.  Leap years are \softline
those divisible by four with one exception - years that are divisible by 100 but not divisible by 400 are NOT \softline
leap years. Hence, 2000 is a leap year, but 2100 is not.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Also, you should know that January 1, 1998, was a Thursday.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The input and output of your program will be very simple.  Input will be a year, and output will be the number \softline
of Friday the 13ths in that year. Remember, do not prompt for an input.  The year number will always be 1998 or\par
}{\plain \fs16 \f1\fs16 beyond.  You will not be asked to provide information on past years.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      1998\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      3\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16     2050\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16     1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 }{\plain \fs16 \b\f1\fs16 Problem 5\par
}{\plain \fs16 \b\f1\fs16                                 ---------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 There are a lot of weird things in this world.  There are people who believe Elvis is still alive, there are \softline
plants which eat animals, there are alien markings in fields of hay, and there are bolts of lightning shaped \softline
like basketballs that bounce around.  Even mathematics has it's share of weirdness. In fact, this problem deals \softline
with the calculation of weird numbers.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 A number is called 'weird' if it is 'abundant' without being the sum of any subset of its proper divisors.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 An 'abundant' number is one that is smaller than the sum of all of its proper divisors.  For example, 12 is \softline
abundant, since it's proper divisors are 1, 2, 3, 4, and 6, and 1+2+3+4+6 = 16.  (Note that a number is not a \softline
proper divisor of itself.)\par
}{\plain \fs16 \f1\fs16  \par
}{\plain \fs16 \f1\fs16 The smallest weird number is 70.  The proper divisors of 70 are 1, 2, 5, 7, 10, 14, and 35, the sum of which is \softline
74, which is greater than 70.  No subset of these values adds up to 70.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Write a program that takes as an input a number, and calculates and outputs the next 'weird' number greater than \softline
that number.  Your program may not take more than one minute to run on any of the cases below.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 SPECIAL NOTE: If your program runs more than one minute, the judges will terminate their test.  If it doesn't \softline
complete within that time, we will assume that the program is in an infinite loop.  In that case, the message \softline
you will get from the judges will be "No output within 1 minute."\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      70\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      69\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      70\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Test case 1\par
}{\plain \fs16 \f1\fs16 -----------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      70\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      ???  A number bigger than 70!  Figure it out!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs24 \b 1999 Contest}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                         }{\plain \fs16 \b\f1\fs16 Problem 1 - Blown Fuses\par
}{\plain \fs16 \b\f1\fs16                         -----------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Most people don't realize how much power it takes to run a lab full of computers.  Computers consume enough \softline
power that if you are not careful, you can easily blow a fuse.  Calculating how much power is needed for a lab \softline
is a simple process, but it can be time consuming if you have to do it again and again.  A local group of \softline
electricians, the Adept Circuit Makers guild, feels that they have wasted too much time calculating power \softline
requirements for computer labs, so they have asked you to write a piece of software to help them with their \softline
calculations.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 In order to do the calculations you will need to know a few facts: \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 A. The average computer consumes 1.5 amperes, the average monitor consumes 1.0 amperes, the average printer \softline
consumes 2.0 amperes, and the average router consumes 0.5 amperes.  Every computer has a single monitor.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 B. Fuses are made in 10 amp increments; i.e., there are 30 amp fuses and 40 amp fuses, but no 35 amp fuses.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 C. The electrical code requires that each lab must use a fuse rated at least two times the average ampere load \softline
for the equipment in that lab.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Given these figures, you are to write a program that will read as input the number of computers, the number of \softline
printers, and the number of routers.  Your program should then calculate and print out the size of the smallest \softline
fuse for that lab.  Remember that fuses only come in ampere ratings that are multiples of 10 amperes.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input: three integers - the number of computers, the number of printers, and the number of routers, in that \softline
order\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output: a single integer - the minimum fuse size required for the lab.  Your program should then output the word \softline
"amperes" followed by a newline character and then quit.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      10 2 1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      60 amperes\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      5 4 0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      50 amperes\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                    }{\plain \fs16 \b\f1\fs16 Problem 2 - The Year 2000 Computer Problem\par
}{\plain \fs16 \b\f1\fs16                    ------------------------------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Computers are evolving at an incredible pace, and savvy business people know that it is important to keep up 
with the times in order to be successful. Many software companies keep up with all the changes and are quite \softline
successful. Unfortunately, some companies just seem to march to the beat of a drummer that only they can hear.  \softline
Take, for example, Applied Cryogenic Marmalade.  As the name implies, they are confused about a great many \softline
things.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The information systems managers at Applied Cryogenic Marmalade heard about the "Y" to "K" (Y2K) problem and \softline
decided to do something about it.  They wrote a wonderful piece of software that converted all the letter Ys to \softline
letter Ks, and all the letter Ks to Ys.  Proud of their achievement, they used the software to change all their \softline
internal memos.  When they showed off their product at a conference, the sound of the laughter could be heard \softline
for miles.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 As you might imagine, the software turned out to be quite useless and a major embarrassment, so they deleted all \softline
copies of it.  Unfortunately, all of their internal memos now have the word MONDAK in place of MONDAY, SHIPPING \softline
DOCY instead of SHIPPING DOCK, and so on.  They have hired you (in their infinite wisdom) to write a piece of \softline
software to fix their memos.  You are to write a program that inputs text, finds the letters K and Y, and \softline
switches them back to normal.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input - no more than 25 lines of no more than 80 uppercase letters, numbers, spaces, periods, commas, and \softline
newline characters.  (There will be no lower case letters or other symbols.)  The end of the input will be \softline
denoted by an exclamation point character.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output - exactly the same thing as the input, with two exceptions.  First, all the letter Ks are to be replaced \softline
with Ys, and all the letter Ys are to be replaced with Ks.  Second, a blank line at the end, after the final \softline
exclamation point.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Remember to echo everything including spaces, newlines, and the final exclamation point.  The only thing you \softline
should change is the letters K and Y.  (In other words, do not add any output of your own or you'll get it \softline
wrong.)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example\par
}{\plain \fs16 \f1\fs16 -------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 -----\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 TUESDAK, FEBRUARK 8\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 DEAR SIR,\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 REGARDING THE SHIPMENT ON MONDAK, IT WAS LATE AND ARRIVED ON WEDNESDAK.\par
}{\plain \fs16 \f1\fs16 PLEASE MAYE SURE THAT IN MAK WE DO NOT HAVE THE SAME PROBLEMS WITH THE\par
}{\plain \fs16 \f1\fs16 SUNDAK OR WEDNESDAK SHIPMENTS.  ALSO, PLEASE TRACY THE MISSING PACY THAT\par
}{\plain \fs16 \f1\fs16 WAS SCHEDULED FOR LAST JULK.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 SINCERELK,\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 KIN NAY\par
}{\plain \fs16 \f1\fs16 !\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 ------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 TUESDAY, FEBRUARY 8\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 DEAR SIR,\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 REGARDING THE SHIPMENT ON MONDAY, IT WAS LATE AND ARRIVED ON WEDNESDAY.\par
}{\plain \fs16 \f1\fs16 PLEASE MAKE SURE THAT IN MAY WE DO NOT HAVE THE SAME PROBLEMS WITH THE\par
}{\plain \fs16 \f1\fs16 SUNDAY OR WEDNESDAY SHIPMENTS.  ALSO, PLEASE TRACK THE MISSING PACK THAT\par
}{\plain \fs16 \f1\fs16 WAS SCHEDULED FOR LAST JULY.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 SINCERELY,\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 YIN NAK\par
}{\plain \fs16 \f1\fs16 !\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                   }{\plain \fs16 \b\f1\fs16 Problem 3 - Cellular Biology Meets Junk Food\par
}{\plain \fs16 \b\f1\fs16                   --------------------------------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                 \par
}{\plain \fs16 \f1\fs16 Computer programmers are surely messy folks.  Have you ever looked down into a keyboard?  Look at all that junk \softline
in there, probably mostly bits of Twinkies and Doritos.  One young scientist, A. Cynthia McTavish is working on \softline
a solution to this problem.  She is trying to develop a bacteria that will be able to live on Twinkie bits and \softline
Dorito crumbs.  And she is very close to a solution, but somehow many of her cultures got mixed up!  She needs \softline
your help in identifying the cultures.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Each of her culture dishes starts out on day #1 with one brand new bacterium. These bacteria are quite special - \softline
they live forever!  When one is placed in a culture dish, it is dormant for one day and then starts to divide.  \softline
After the first day, the cell divides exactly once every day.  Thus, the first bacterium will divide on days #3, \softline
#4, #5, and so on.  All new bacteria (generated from a division) behave in the same way.  The new bacterium born \softline
on day #3 will produce a new one on days #5, #6, #7, and so on.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Hence, assume that Cynthia puts one bacterium in a dish on day #1.  On day #2 there would still be one cell, on 
day #3 there would be two cells, on day #4 there would be three cells, etc.  On day #7 there would already be 13 \softline
cells of bacteria.  Remember that each newly created bacteria cell rests one day before beginning to divide; it \softline
starts dividing after 2 days and does so on every following day.  (Hint: There is a simple pattern here.  See if \softline
you can work it\par
}{\plain \fs16 \f1\fs16 out.)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Ms. McTavish has encountered one problem with her experiment.  Some dishes have been contaminated.  She has \softline
figured out that it is possible to determine if a dish is contaminated by counting the number of bacteria.  If \softline
the number is not in the series described in the previous paragraph (1, 1, 2, 3, ...), she knows the sample is \softline
bad.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 To help Cynthia, you are to write a program that will read in integer counts of bacteria in culture dishes, and \softline
reports back how many days the dishes have been active.  If the number of bacteria is not valid, your program \softline
should report that the dish has been contaminated.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input - a series of integers between 2 and 25000, one per line.  Each integer represents the number of bacteria \softline
in a culture dish.  A zero will be used to indicate the end of the input.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output - one output, on a separate line, for each input (except the zero).  If the input is a valid member of \softline
the series, output the string "Day #" followed by the day number for that culture dish.  If an input number is \softline
not valid, output the word "Contaminated" instead.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example input:                  Example output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      2                               Day #3\par
}{\plain \fs16 \f1\fs16      21                              Day #8\par
}{\plain \fs16 \f1\fs16      5                               Day #5\par
}{\plain \fs16 \f1\fs16      12                              Contaminated\par
}{\plain \fs16 \f1\fs16      14                              Contaminated\par
}{\plain \fs16 \f1\fs16      55                              Day #10\par
}{\plain \fs16 \f1\fs16      0                               \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                         }{\plain \fs16 \b\f1\fs16 Problem 4 - Text to Speech\par
}{\plain \fs16 \b\f1\fs16                         --------------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The Association of Crayon Manufacturers has decided to develop a text-to- speech system in order to aid several \softline
of their VPs who cannot read.  After the software was designed, they laid off the entire development team before \softline
they realized there was more work to be done.  That's where you come in.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The problem is that the system states numbers such as 300 as "three zero zero", which tends to confuse many of \softline
the upper level management using it. Your task will be to write a program that translates a number into its \softline
proper English representation (i.e., "three hundred") so the system can say numbers in a way that's more \softline
understandable.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input - one positive integer, which will be less than or equal to 1 billion with no commas or leading 0s\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output - the words (all in lower case letters) that would be sent to the text-to-speech engine as shown in the \softline
examples below.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16      14179000\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16      fourteen million one hundred seventy nine thousand \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16      0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16      zero\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 3\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16      111111111\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16      one hundred eleven million one hundred eleven thousand one hundred eleven\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 4\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16      17\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16      seventeen\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 5\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16      595\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16      five hundred ninety five\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 6\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16      10000001\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16      ten million one\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                   }{\plain \fs16 \b\f1\fs16 Problem 5 - Measuring Chemicals\par
}{\plain \fs16 \b\f1\fs16                   -------------------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Automated Chemical Mixing company has just finished their core project - a device for pouring out a specific \softline
amount of a hazardous chemical without human intervention.  They didn't realize they needed software support for \softline
it until it was too late, so you've been called in to help.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The machine has an input tank (where thousands of gallons of the chemical are stored), and output tank (where \softline
the measured chemical should go), and three smaller containers (labeled C1, C2, C3) of varying size that can be \softline
used for measuring.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The idea is to use the three containers to move a predetermined amount of the chemical from the input tank to \softline
the output tank.  You are allowed to fill any of the three containers from the input tank, dump any of them into \softline
the output tank, dump any of them back into the input tank, or dump any of them into any other container.  In \softline
the last case, you may only dump enough to fill the second container; none must be spilled!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 There are 15 possible operations, represented by the letters A through O.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 A - empty C1 into output tank      J  dump C1 back into input tank\par
}{\plain \fs16 \f1\fs16 B - dump C1 into C2 *              K  dump C2 back into input tank\par
}{\plain \fs16 \f1\fs16 C - dump C1 into C3 *              L  dump C3 back into input tank\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 D - empty C2 into output tank      M  fill C1 from input tank\par
}{\plain \fs16 \f1\fs16 E - dump C2 into C1 *              N  fill C2 from input tank\par
}{\plain \fs16 \f1\fs16 F - dump C2 into C3 *              O  fill C3 from input tank\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 G - empty C3 into output tank\par
}{\plain \fs16 \f1\fs16 H - dump C3 into C1 *          \par
}{\plain \fs16 \f1\fs16 I - dump C3 into C2 *\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 * Dumping one small container into another consists of filling the second container as much as possible with the \softline
contents of the first, leaving the remaining chemical, if any, in the first container.  For example, let's say\par
}{\plain \fs16 \f1\fs16 that C1 holds 4 gallons and C2 holds 5 gallons.  If you fill C2 from the input tank and dump as much as possible \softline
into C1, C1 would have 4 gallons, and C2 would have 1 remaining gallon.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your task is to write a program that generates a set of commands, using the letters in the table above, that \softline
describes how to get the proper quantity of chemical from the input tank to the output tank, given the size of \softline
the three containers and the amount of chemical needed in the output tank You do not have to dump any chemical \softline
remaining in the three containers.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input - four integers representing the sizes of the containers and the amount required (T) in the following \softline
order: C1 C2 C3 T    The containers will all be less than 100 gallons in size, and the output tank will require \softline
less than 1000 gallons.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output - a sequence of characters (fewer than 1000) that represent commands that would fill the output tank to \softline
the required depth, followed by a '*' and a newline.  Do not put spaces between characters or generate any other \softline
output!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You may assume that a solution will always be possible.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example\par
}{\plain \fs16 \f1\fs16 -------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16      2 5 8 1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16      OIHG*\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Here is a list of the operations that will be performed by this sequence:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 O - Fill C3 (the 8 gallon container)\par
}{\plain \fs16 \f1\fs16 I - Dump 5 gallons from C3 to C2, leaving 3 gallons in C3\par
}{\plain \fs16 \f1\fs16 H - Dump 2 gallons from C3 to C1, leaving 1 gallon in C3\par
}{\plain \fs16 \f1\fs16 G - Dump the remaining 1 gallon from C3 into the output tank\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs24 \b 2000 Contest\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                 }{\plain \fs16 \b\f1\fs16 Problem 1 - American vs. European Dates\par
}{\plain \fs16 \b\f1\fs16                 ---------------------------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You've just been hired on as a programmer for Amalgamated Calendar Makers (ACM, for short).  Since the Y2K \softline
crisis is over, your job is to tackle a different date-related problem - the difference between U.S. and \softline
European date formats.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 In the U.S. most people write dates using three numbers: first the month, then the day, and then the year.  This \softline
is called "MM DD YYYY" format.  For example:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         In the U.S.     03 07 2000      means   March 7, 2000.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 People in Europe also write dates using three numbers.  However, most Europeans write the *day* first, and then \softline
the *month*, and then the year. This is called "DD MM YYYY" format.  For instance:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         In Europe       03 07 2000      means   July 3, 2000.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Some dates (like "03 07 2000") are inherently ambiguous, but in most cases, a date written in U.S. or European \softline
format simply doesn't make sense in the other.  For example, "03 13 2000" doesn't make sense as a European date\par
}{\plain \fs16 \f1\fs16 because 13 is not a valid month number.  Similarly, "13 03 2000" doesn't make sense as an American date.  In \softline
cases like this, a computer program should be able to tell that "03 13 2000" means March 13, 2000.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your first job at ACM is to write a program that determines if an input date must be in U.S. format, must be in \softline
European format, or could be in either format.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program will input three numbers on a single line.  These numbers will represent a *valid* date in U.S. (MM \softline
DD YYYY) or European (DD MM YYYY) format.  The three numbers will be separated by spaces.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program must print one of the following words:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16    - "American" if the input date makes sense *only* in U.S. format;\par
}{\plain \fs16 \f1\fs16    - "European" if the input date makes sense *only* in European format;\par
}{\plain \fs16 \f1\fs16    - "Ambiguous" if the input date makes sense in *both* formats.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 After printing the word, your program must print a newline character and then quit.  Do not print prompts or any \softline
information other than the single word.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Examples:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:                  Input:                  Input:\par
}{\plain \fs16 \f1\fs16         03 13 2000              13 03 2000              07 04 1976\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:                 Output:                 Output:\par
}{\plain \fs16 \f1\fs16         American                European                Ambiguous\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:                  Input:                  Input:\par
}{\plain \fs16 \f1\fs16         07 24 1847              01 01 2000              31 12 1999\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:                 Output:                 Output:\par
}{\plain \fs16 \f1\fs16         American                Ambiguous               European\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                         }{\plain \fs16 \b\f1\fs16 Problem 2 - Screaming HTML\par
}{\plain \fs16 \b\f1\fs16                         --------------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Anyone who uses computers very much knows that text written in all upper case letters implies shouting and is \softline
generally considered to be extremely rude. With that in mind, the Angry Cretan Maniacs (ACM, for short), a \softline
popular rock group, has decided to update their web pages.  Since this group isn't clever enough to make the \softline
changes themselves, they hired you to do it for them.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 For this problem you are to write a program for ACM that reads a line of input and outputs the same line after \softline
replacing lower case text with upper case and replacing periods with exclamation marks. It must leave HTML tags\par
}{\plain \fs16 \f1\fs16 alone, however.  A tag consists of any text that begins with `<' and ends with `>' (without the quotes). You may \softline
assume that neither `<' nor `>' will appear within a tag or as part of text; they will always delineate a tag.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Do not print prompts or any information other than the single line of\par
}{\plain \fs16 \f1\fs16 translated HTML text.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Examples:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16         Welcome to my web page.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         WELCOME TO MY WEB PAGE!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16         Look at my <a href="bookmarks.html">bookmark page</a>.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         LOOK AT MY <a href="bookmarks.html">BOOKMARK PAGE</a>!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16         <img src="me.jpg">Look at Me!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         <img src="me.jpg">LOOK AT ME!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16         <b>Welcome to the ACM page.</b>\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         <b>WELCOME TO THE ACM PAGE!</b>\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16         <h1>We have lots of good stuff here...</h1>\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         <h1>WE HAVE LOTS OF GOOD STUFF HERE!!!</h1>\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\f1\fs16                 Problem 3 - MP3 File Quality\par
}{\plain \fs16 \b\f1\fs16                 ----------------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The Augusta Conservatory of Musicians (ACM, for short) has recently started using a MS-DOS based system to \softline
archive the work of local musicians.  The musicians record a variety of jazz, country, and religious music and \softline
then submit it to ACM for archiving.  ACM requested that all music be submitted in MP3 files.  (MP3 files use a \softline
sound compression scheme that can compress the sound file by as much as 30:1.)  Unfortunately, each musician \softline
used a different level of compression when submitting the MP3 files.  The Augusta Chamber of Musicians has asked \softline
you to help classify the music.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You are to write a program that will take information about a recorded piece of music and determine the Quality \softline
Measure of the file.  Quality of a sound file is determined by how many bits of information are stored for every\par
}{\plain \fs16 \f1\fs16 second of music.  The following table lists the Quality Measures you will use.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16       quality value for MP3 file                Quality Measure\par
}{\plain \fs16 \f1\fs16       --------------------------                ---------------\par
}{\plain \fs16 \f1\fs16          32,000 bits per second                 Phone quality\par
}{\plain \fs16 \f1\fs16          64,000 bits per second                 AM radio quality\par
}{\plain \fs16 \f1\fs16          96,000 bits per second                 LP record quality\par
}{\plain \fs16 \f1\fs16         128,000 bits per second                 FM radio quality\par
}{\plain \fs16 \f1\fs16         196,000 bits per second                 CD quality\par
}{\plain \fs16 \f1\fs16         256,000 bits per second                 Studio quality\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program will input the size of the MP3 file (in kilobytes), and the time for the music in minutes and \softline
seconds.  It will then calculate a quality value (bits per second) for the music file.  Next, it will find the \softline
Quality Measure for the file by determining which number in the table above is closest to the calculated quality \softline
value.  (In case of a tie, round to the lower Measure.) Lastly, you will display the bits per second and Quality \softline
Measure.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program will first input three positive integers, with one space between them and one return following the \softline
last number.  The first integer is the size of the music file in kilobytes, the second and third integers are \softline
the time for the music in minutes and seconds (in that order).\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program must then print out the number of bits per second for that MP3 file (rounded to the nearest \softline
integer, 0.5 rounds up), a comma, one space, and its Quality Measure.  Do not print prompts or anything other \softline
than the required information.  Be sure to use the same upper and lower case as described above.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Remember that there are 1024 bytes in a kilobyte, and 8 bits in a byte.  For this problem sound files will be no \softline
larger than 100,000 kilobytes.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 ----------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16         3048 5 32\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         75208 bits per second, AM radio quality\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 ----------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16         10245 32 1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         43689 bits per second, Phone quality\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 3:\par
}{\plain \fs16 \f1\fs16 ----------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16         20084 12 8\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         226000 bits per second, Studio quality\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 (Note that for this example, the bit rate rounds to 226000 for output.  This is exactly half way between two \softline
quality measures, but the actual calculated value, without rounding, is closer to the upper quality measure.)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                 }{\plain \fs16 \b\f1\fs16 Problem 4 - Where There's Smoke ...\par
}{\plain \fs16 \b\f1\fs16                 -----------------------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 There have been several lightning strikes in the Canadian forests lately, and the Academie Canadien de Mounties \softline
(ACM, for short) has decided that they need to be able to predict how large the lightning-caused forest fires \softline
would be if left alone for a certain number of days.  They have given you the job of writing a program to do \softline
this.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program will simulate the behavior of a fire by dividing the forest into a 2-dimensional grid of squares.  \softline
Each lightning strike will occur at the beginning of day 0 and each will be located in a unique square.  The \softline
program will make the following assumptions:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16     - forest fires spread from a currently burning square north, south, east\par
}{\plain \fs16 \f1\fs16         and west at a rate of one square each day\par
}{\plain \fs16 \f1\fs16     - forest fires do not spread diagonally\par
}{\plain \fs16 \f1\fs16     - after one day the fire in any square will go out\par
}{\plain \fs16 \f1\fs16     - a burned square will be destroyed and cannot catch fire again\par
}{\plain \fs16 \f1\fs16     - forests are no more than 30 squares in each direction\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input to the program will be the following on separate lines:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16     - the width (east-west) and height (north-south) of the forest\par
}{\plain \fs16 \f1\fs16     - the number of lightning strikes (no more than width*height)\par
}{\plain \fs16 \f1\fs16     - x and y coordinates for each lightning strike\par
}{\plain \fs16 \f1\fs16     - how many days to run the simulation\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The x and y coordinates are the distance from the upper left corner of the forest.  The first input is the \softline
horizontal (east) distance, and the second is vertical (south).  The upper left square is at location 0 0.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program is to print the number of burning squares at the end of the simulation.  Do not print prompts, or \softline
any additional output other than a single integer.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Here are some examples.  The first two include maps to help you see what is going on and should not be output by \softline
your program.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 ----------\par
}{\plain \fs16 \f1\fs16 Input:  \par
}{\plain \fs16 \f1\fs16         5 5\par
}{\plain \fs16 \f1\fs16         1\par
}{\plain \fs16 \f1\fs16         2 2\par
}{\plain \fs16 \f1\fs16         1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         4\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 For this example, here's what the map would look like after 1 day:\par
}{\plain \fs16 \f1\fs16                                         .....\par
}{\plain \fs16 \f1\fs16                                         ..*..           * = fire\par
}{\plain \fs16 \f1\fs16                                         .*_*.           . = tree\par
}{\plain \fs16 \f1\fs16                                         ..*..           _ = dead\par
}{\plain \fs16 \f1\fs16                                         .....\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 ----------\par
}{\plain \fs16 \f1\fs16 Input:                             map after 2 days:\par
}{\plain \fs16 \f1\fs16         7 5\par
}{\plain \fs16 \f1\fs16         3                               __*.... \par
}{\plain \fs16 \f1\fs16         0 0                             _**....\par
}{\plain \fs16 \f1\fs16         5 4                             **_*.*. \par
}{\plain \fs16 \f1\fs16         2 3                             *___*_*\par
}{\plain \fs16 \f1\fs16         2                               .*_*___\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         12\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 3:\par
}{\plain \fs16 \f1\fs16 ----------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16         30 30\par
}{\plain \fs16 \f1\fs16         10\par
}{\plain \fs16 \f1\fs16         25 11\par
}{\plain \fs16 \f1\fs16         23 23                     you'll have to trust us on this one\par
}{\plain \fs16 \f1\fs16         27 5                            (or you draw the map)\par
}{\plain \fs16 \f1\fs16         10 23\par
}{\plain \fs16 \f1\fs16         8 16\par
}{\plain \fs16 \f1\fs16         14 18\par
}{\plain \fs16 \f1\fs16         10 15\par
}{\plain \fs16 \f1\fs16         28 27\par
}{\plain \fs16 \f1\fs16         19 21\par
}{\plain \fs16 \f1\fs16         4 18\par
}{\plain \fs16 \f1\fs16         4\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         105\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                 }{\plain \fs16 \b\f1\fs16 Problem 5 - What To Do Next???\par
}{\plain \fs16 \b\f1\fs16                 ------------------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 AAA Cold Medication, Inc. (ACM, for short) is in a fix - their production manager just quit and they don't know \softline
what they are going to do.  They have several milestones to meet before they can release their final product, \softline
but they've lost all of the notes on what order to do them in!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 That's where you come in.  Given a list of milestones (up to 26, named A-Z), and which other milestone(s) need \softline
to be done before you can finish each one of them, you are to write a program that helps ACM out by giving them \softline
a prioritized list.  Your output should be a list of milestones such that each milestone appears sometime after \softline
the milestone(s) on which it depends; i.e., each one is listed after any milestone(s) that must be completed \softline
before it.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 There will always be at least one solution.  Milestones will never depend on each other in a loop.  There may be \softline
multiple solutions, but you only need to find one.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input will be in the following form:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 # of milestones\par
}{\plain \fs16 \f1\fs16 <Milestone> <number of dependencies> <dependency1> <dependency2> ...\par
}{\plain \fs16 \f1\fs16 <Milestone> <number of dependencies> <dependency1> <dependency2> ...\par
}{\plain \fs16 \f1\fs16 .\par
}{\plain \fs16 \f1\fs16 .\par
}{\plain \fs16 \f1\fs16 .\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output will be a list of upper case letters with spaces between them and then a return.  Each milestone must \softline
appear exactly once in your output list.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 ----------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16         3\par
}{\plain \fs16 \f1\fs16         A 0\par
}{\plain \fs16 \f1\fs16         B 2 C A\par
}{\plain \fs16 \f1\fs16         C 1 A\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         A C B  \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 ----------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16         6\par
}{\plain \fs16 \f1\fs16         A 0\par
}{\plain \fs16 \f1\fs16         B 2 A F\par
}{\plain \fs16 \f1\fs16         C 2 D B\par
}{\plain \fs16 \f1\fs16         D 3 A B F\par
}{\plain \fs16 \f1\fs16         E 2 F C\par
}{\plain \fs16 \f1\fs16         F 0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         A F B D C E\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 3:\par
}{\plain \fs16 \f1\fs16 ----------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16         10\par
}{\plain \fs16 \f1\fs16         A 2 E J\par
}{\plain \fs16 \f1\fs16         B 4 E A C H\par
}{\plain \fs16 \f1\fs16         C 1 A\par
}{\plain \fs16 \f1\fs16         D 3 C E A\par
}{\plain \fs16 \f1\fs16         E 1 J\par
}{\plain \fs16 \f1\fs16         F 3 B H A\par
}{\plain \fs16 \f1\fs16         G 0\par
}{\plain \fs16 \f1\fs16         H 2 A E\par
}{\plain \fs16 \f1\fs16         I 5 A C E J F\par
}{\plain \fs16 \f1\fs16         J 0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         G J E A C H B D F I\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs24 \b 2001 Contest\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                 Problem Set\par
}{\plain \fs16 \f1\fs16                 2001 ACM High School Programming Contest\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 REMEMBER:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 All input comes from the keyboard, and all output goes to the screen.  In all problems, you should output ONLY \softline
what is specified.  Do not output debugging information, and do not prompt for input.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You should turn in an executable file called "programN", where N is the problem number. Do NOT turn in source \softline
code.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                 }{\plain \fs16 \b\f1\fs16 Problem 1 - What Was That Number Again?\par
}{\plain \fs16 \b\f1\fs16                 ---------------------------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You've just been hired on as a junior programmer for A-1 Computer Modems, Inc. (ACM).  Your first job is to \softline
write a program that deals with phone numbers.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Generally, today's modems expect that a phone number will be typed in as a sequence of digits (zero through \softline
nine), as shown in these examples:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         8824295                 2668228                 3569377\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 But these days, it's pretty common for people to see phone numbers written with letters in place of some or all \softline
of the digits.  For instance, the phone numbers above might be written like this:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         UTAHBY5                 CONTACT                 FLOWERS\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Each letter represents a digit in the actual phone number.  For example, the letters `A', `B', and `C' all \softline
represent the digit 2.  The letters `D', `E', and `F' represent 3, and so on, as indicated on all modern \softline
telephone keypads.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your company wants its modems to understand phone numbers that contain both letters and digits.  Unfortunately, \softline
the hardware inside the modems can only deal with digits.  Therefore, your job at ACM is to write a phone number\par
}{\plain \fs16 \f1\fs16 translation program.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Write a program that reads SEVEN characters of input: each of these characters will be a digit (`0'--`9') or an \softline
upper-case letter (`A'--`Z'). These seven characters represent a phone number.  Your program must translate\par
}{\plain \fs16 \f1\fs16 this input into a phone number that contains ONLY DIGITS, according to the following rules.  For each input \softline
character:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16   + If the character is a DIGIT, output that digit.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16   + If the character is an UPPER-CASE LETTER, output the digit that is represented by that letter, as indicated \softline
by the following table:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                 ABC  == 2       JKL  == 5       TUV  == 8\par
}{\plain \fs16 \f1\fs16                 DEF  == 3       MNO  == 6       WXYZ == 9\par
}{\plain \fs16 \f1\fs16                 GHI  == 4       PQRS == 7\par
}{\plain \fs16 \f1\fs16 After printing the translated phone number, your program must print a newline character (`\\n') and exit.  Thus, \softline
your program will output a sequence of exactly seven digits, followed by a newline, and NOTHING ELSE.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You may assume that the input to your program will be exactly seven alphanumeric characters, followed by a \softline
newline character.  In the examples below, be sure to notice the difference between zero `0' and oh `O'.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1               Example 2               Example 3\par
}{\plain \fs16 \f1\fs16 --------------------    --------------------    -----------------------\par
}{\plain \fs16 \f1\fs16 Input:  5818224         Input:  4PIZZAS         Input:  COLLECT\par
}{\plain \fs16 \f1\fs16 Output: 5818224         Output: 4749927         Output: 2655328\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 4               Example 5               Example 6\par
}{\plain \fs16 \f1\fs16 --------------------    --------------------    -----------------------\par
}{\plain \fs16 \f1\fs16 Input:  UTAHBY5         Input:  PN65000         Input:  2GO4FUN\par
}{\plain \fs16 \f1\fs16 Output: 8824295         Output: 7665000         Output: 2464386\par
}{\plain \fs16 \f1\fs16         \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                         Problem 2 - DNA Matcher\par
}{\plain \fs16 \f1\fs16                         -----------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Extracting genetic information from a cell is a demanding process.  Each strand of DNA must be extracted, \softline
replicated, and analyzed one molecule at a time.  The four molecules that make up DNA are:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                  Cytosine  Thymine  Adenine  Guanine\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 These molecules are represented by their first letters: C, T, A, and G.  When a portion of a DNA strand is \softline
sequenced, the result is a string of these letters.  The string represents some sequence of molecules in the DNA \softline
strand. Here is an example DNA sequence representation:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16            GTCAACTACTACCTAGCTAGACATAGCACTCTACCGACTACGCATACG\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The process of reading an entire DNA strand is the process of reading many partial sequences from the DNA and \softline
then merging these smaller sequences together to form one long sequence.  One difficulty is discovering how the\par
}{\plain \fs16 \f1\fs16 small sequences should be merged to form the entire DNA strand.  Fortunately, the small DNA sequences overlap \softline
each other, thus giving us a clue as to how they fit together.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You have been hired to write a program called Assessment of Complex Molecules (ACM) that takes two DNA sequences \softline
as input and determines if the two sequences overlap.  For this problem, two strands overlap if at least five\par
}{\plain \fs16 \f1\fs16 molecules at the START of one strand match the same number of molecules at the END of the other strand.  For \softline
example, these two strands overlap:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                       GTACTACCGG    GACCAAGTACTA\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The first six characters of the first strand are the same as the last six characters of the second strand.  If \softline
the second strand were placed before the first, they could be merged into a single strand like this:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                            GACCAAGTACTACCGG\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 These two strands do not overlap:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                        GAGACTICAT    GAGACTTICA\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 ACM INPUT:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Two strings representing DNA molecule sequences.  The strings will contain the upper case letters G, A, T, and \softline
C, in any order.  Each string will be followed by a newline. The strings will be at least six letters long and \softline
at most 50 characters long.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 ACM OUTPUT:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 If the two strings do not overlap by at least five letters, output the string "no overlap" followed by a newline \softline
character ('\\n').\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 If the two strings do overlap by at least five letters, merge the strings and output the SHORTEST possible \softline
merged string, followed by a newline character. Be careful -- strings may overlap in different ways and by \softline
different amounts. In all our test cases, the answer will be unique.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 EXAMPLE 1:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:   CAGGATATATATA\par
}{\plain \fs16 \f1\fs16          TATATATGG\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:  CAGGATATATATATGG\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 EXAMPLE 2:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:   GATTACA\par
}{\plain \fs16 \f1\fs16          ATTACAGATTA\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:  GATTACAGATTA\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 EXAMPLE 3:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:   TAGAGGGACA\par
}{\plain \fs16 \f1\fs16          CCGGACATAGA\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:  no overlap\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\f1\fs16                         Problem 3 - B.I.N.G.O.\par
}{\plain \fs16 \b\f1\fs16                         ----------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The Artificial Cybernetic Machine Co. (ACM) has just developed their newest game playing machine designed to \softline
entertain astronauts during their long voyages in outer space.  The first game to be implemented is BINGO, and \softline
you have been asked to write the software.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The standard BINGO card is a 5 by 5 grid containing integers between 1 and 75, with a FREE spot at the center \softline
that contains 0.  The first column in the grid contains only integers between 1 and 15, the second column \softline
numbers are all between 16 and 30, the third are 31 to 45, the fourth 46-60, and the fifth 61-75.  There are no \softline
duplicate numbers on a BINGO card.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Before the game starts, each player is given a BINGO card.  The game also has a "caller", who issues a list of \softline
all the integers between 1 and 75 in random order.  As each number is called, players mark the appropriate \softline
squares on their cards.  The middle square, the FREE square, is always marked.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The winner of the game is the first person whose BINGO card has one of the following winning conditions:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         A. All five spots in a column are marked\par
}{\plain \fs16 \f1\fs16         B. All five spots in a row are marked\par
}{\plain \fs16 \f1\fs16         C. All the spots in either of the two diagonals are marked\par
}{\plain \fs16 \f1\fs16         D. The four corner squares are all marked\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program will be given a BINGO card configuration and a stream of numbers between 1 and 75.  It must output \softline
the number that generates the earliest possible winning condition.  Good luck!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 INPUT\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your input will consist of two parts.  The first five lines will represent the BINGO card.  Each line will be a \softline
row of five integers separated by spaces.  The third number in the third line, the free square, will always\par
}{\plain \fs16 \f1\fs16 contain the number 0.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Next will come another seventy five integers, each on a separate line.  These will always be the values between \softline
1 and 75 in random order.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 OUTPUT\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your output will be a single integer, followed by a newline character.  This should be the input that gave you \softline
the earliest winning condition.  In other words, the last number called before you would declare BINGO.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 EXAMPLE:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16         10 22 41 53 71\par
}{\plain \fs16 \f1\fs16          2 20 40 50 66\par
}{\plain \fs16 \f1\fs16         14 26  0 52 69\par
}{\plain \fs16 \f1\fs16         15 29 37 51 65\par
}{\plain \fs16 \f1\fs16          6 17 35 55 64\par
}{\plain \fs16 \f1\fs16         9\par
}{\plain \fs16 \f1\fs16         14\par
}{\plain \fs16 \f1\fs16         17\par
}{\plain \fs16 \f1\fs16         52\par
}{\plain \fs16 \f1\fs16         72\par
}{\plain \fs16 \f1\fs16         69\par
}{\plain \fs16 \f1\fs16         35\par
}{\plain \fs16 \f1\fs16         26\par
}{\plain \fs16 \f1\fs16         63\par
}{\plain \fs16 \f1\fs16         1\par
}{\plain \fs16 \f1\fs16         12\par
}{\plain \fs16 \f1\fs16         [et cetera, until are numbers have been listed]\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16         26\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                      }{\plain \fs16 \b\f1\fs16 Problem 4 - Egyptian Fractions\par
}{\plain \fs16 \b\f1\fs16                      ------------------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Although the ancient Egyptians were master engineers and builders, their mathematical expertise had some obvious \softline
flaws.  One such was the inability of their system of numbers to handle what we view as simple rational \softline
fractions.  All fractions in their system had a numerator of 1, as in:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         1/2,  1/3,  1/4,  1/5,  ...\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 More complicated fractional numbers were represented as a sum of simple fractions.  In the sum, each fraction \softline
had a UNIQUE denominator.  For example:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         3/5 = 1/2 + 1/10   (NOT  1/5 + 1/5 + 1/5)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         5/7 = 1/2 + 1/5 + 1/70\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Unfortunately for them, there was no computing device that would help them do mathematical calculations.  Since \softline
you are the proud owner of an Advanced Calculating Machine (ACM), you would be able to help them out by writing \softline
a program that reads in a rational fraction and writes it out in Egyptian style as a sum of simple fractions.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your assignment for this problem is to do just that.  You may assume that in the rational fractions provided, \softline
the numerator will be less than the denominator, each of those values will be less than 25, and the number of \softline
simple components in your output will be no more than 10.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input will be 2 integers on a single line, separated by blanks, with the numerator preceding the denominator. \softline
Your output should be presented in the form shown above, where the rational fraction is printed, followed by the \softline
representative Egyptian fractions separated by `+' signs (with a single space separating each of those \softline
components), followed by a single newline character.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Examples:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:                             Input:\par
}{\plain \fs16 \f1\fs16       3 5                               19 20\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:                            Output:\par
}{\plain \fs16 \f1\fs16       3/5 = 1/2 + 1/10                  19/20 = 1/2 + 1/3 + 1/9 + 1/180\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:                             Input:\par
}{\plain \fs16 \f1\fs16      5 7                                7 23\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:                            Output:\par
}{\plain \fs16 \f1\fs16      5/7 = 1/2 + 1/5 + 1/70             7/23 = 1/4 + 1/19 + 1/583 + 1/1019084\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Note that the answer may not be unique.  Any valid output is correct.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\f1\fs16                         Problem 5 - Word Ladders\par
}{\plain \fs16 \b\f1\fs16                         ------------------------}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 _Amazing_Computing_Monthly_, a major computer industry magazine, has hired you write a monthly "word ladder" \softline
problem.  You've decided to write a program to help you with this task.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 A "word ladder" is a game that begins with two words: a "start word" and an "end word" as shown in the examples \softline
below.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16         Example 1                               Example 2\par
}{\plain \fs16 \f1\fs16         -----------------------                 -----------------------\par
}{\plain \fs16 \f1\fs16         lead    <--- start word                 give    <--- start word\par
}{\plain \fs16 \f1\fs16         ....                                    ....\par
}{\plain \fs16 \f1\fs16         gold    <---   end word                 take    <---   end word\par
}{\plain \fs16 \f1\fs16         -----------------------                 -----------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The game is played by changing ONE letter at a time, each time making a new word.  (Each change MUST result in \softline
an actual word.)  The goal is to change the start word into the end word in the fewest number of steps.  Put \softline
another way, you're making the shortest possible "ladder" from the start word to the end.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 In Example 1 above, the first step would be to replace one letter in "lead" to make another word.  So, the \softline
second word in the ladder might be any of these:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16          bead    dead    head    leaf    leap    lend    load    read\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 If you chose "bead", the next word in the ladder could be any of these:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16          beak    bean    bend    brad    dead    head    lead    read\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Obviously, some of these word choices are bad because they result in long ladders or run around in circles.  \softline
There's no point in going from "lead" to "bead" to "dead", for instance, because you could go from "lead" to \softline
"dead" in just one step.  Similarly, there's no point in going from "lead" to "bead" and then back to "lead".\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The goal of the game is to find a word ladder that is AS SHORT AS POSSIBLE.\par
}{\plain \fs16 \f1\fs16 So, for the examples above, you might find the following ladders:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16     Example 1                   Example 2\par
}{\plain \fs16 \f1\fs16     ------------------------    -------------------------------------------\par
}{\plain \fs16 \f1\fs16     lead    (In this case,      give      give      give      give\par
}{\plain \fs16 \f1\fs16     load    there is only       gave      live      dive      gave\par
}{\plain \fs16 \f1\fs16     goad    one shortest        cave  OR  like  OR  dike  OR  save  OR  ...\par
}{\plain \fs16 \f1\fs16     gold    word ladder.)       cake      lake      tike      sake\par
}{\plain \fs16 \f1\fs16     ------------------------    take      take      take      take\par
}{\plain \fs16 \f1\fs16                                 -------------------------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 As shown for Example 2, there might be more than one "shortest" word ladder. If so, then any of these "shortest" \softline
ladders is OK.  You just need to find one!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 This is where your program comes in.  Your program will solve word ladder problems like these, by finding the \softline
shortest possible word ladder solutions.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Write a program that reads the following input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16   + The "start word" for a word ladder.\par
}{\plain \fs16 \f1\fs16   + The "end word" for a word ladder.\par
}{\plain \fs16 \f1\fs16   + A number, indicating the number of words in the "dictionary."\par
}{\plain \fs16 \f1\fs16   + The words in the dictionary.  These are the words that your program can use\par
}{\plain \fs16 \f1\fs16     to make word ladders.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Each word and number will appear on a separate input line.  Each word will contain exactly FOUR LOWER-CASE \softline
LETTERS.  (No upper-case letters, and no apostrophes.)  The number of words in the dictionary will never be more \softline
than thirty (30).  You may assume that the start and end words will always appear in the dictionary.  You may \softline
also assume that the start and end words will always be different from each other. Your program must output ONE \softline
of the SHORTEST word ladders from the start word to the end word.  Every word in the ladder must be a word that \softline
appears in the dictionary.  Remember that there may be more than one "shortest" ladder between the start word \softline
and the end word.  Your program may output any one of these ladders.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Each word in the ladder must be printed on a line by itself.  The words must be printed in order (of course!).  \softline
The first output word must be the start word and the last output word must be the end word.  Your program may \softline
not print extra spaces or anything else around the words --- just print the words in order, each followed by a \softline
newline.  Your program must exit after printing the ladder.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 If there is NO WAY to make a ladder from the start word to the end word, your program must output the words "no \softline
solution" (all lower case, no quotes), output a newline, and then exit.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 In any case, your program must either print a word ladder or "no solution" in NO MORE THAN FIVE SECONDS.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1               Example 2               Example 3\par
}{\plain \fs16 \f1\fs16 ------------            ------------            ------------\par
}{\plain \fs16 \f1\fs16 Input:                  Input:                  Input:\par
}{\plain \fs16 \f1\fs16         life                    hero                    card\par
}{\plain \fs16 \f1\fs16         raft                    zero                    hand\par
}{\plain \fs16 \f1\fs16         4                       6                       5\par
}{\plain \fs16 \f1\fs16         life                    aero                    band\par
}{\plain \fs16 \f1\fs16         lift                    herb                    bard\par
}{\plain \fs16 \f1\fs16         raft                    herd                    card\par
}{\plain \fs16 \f1\fs16         rift                    hero                    hand\par
}{\plain \fs16 \f1\fs16 Output:                         hire                    hard\par
}{\plain \fs16 \f1\fs16         life                    zero            Output:\par
}{\plain \fs16 \f1\fs16         lift            Output:                         card\par
}{\plain \fs16 \f1\fs16         rift                    hero                    hard\par
}{\plain \fs16 \f1\fs16         raft                    zero                    hand\par
}{\plain \fs16 \f1\fs16 ------------            ------------            ------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 4               Example 5               Example 6\par
}{\plain \fs16 \f1\fs16 ------------            ------------            -------------------\par
}{\plain \fs16 \f1\fs16 Input:                  Input:                  Input:\par
}{\plain \fs16 \f1\fs16         head                    more                    bank\par
}{\plain \fs16 \f1\fs16         foot                    less                    loan\par
}{\plain \fs16 \f1\fs16         14                      20                      17\par
}{\plain \fs16 \f1\fs16         bead                    lass                    band\par
}{\plain \fs16 \f1\fs16         bear                    lens                    bank\par
}{\plain \fs16 \f1\fs16         beat                    less                    bean\par
}{\plain \fs16 \f1\fs16         boar                    list                    bend\par
}{\plain \fs16 \f1\fs16         boat                    lore                    bent\par
}{\plain \fs16 \f1\fs16         boot                    lose                    land\par
}{\plain \fs16 \f1\fs16         coat                    loss                    lean\par
}{\plain \fs16 \f1\fs16         coot                    lost                    load\par
}{\plain \fs16 \f1\fs16         foot                    mare                    loan\par
}{\plain \fs16 \f1\fs16         head                    mess                    meal\par
}{\plain \fs16 \f1\fs16         hear                    miss                    mean\par
}{\plain \fs16 \f1\fs16         near                    mist                    sand\par
}{\plain \fs16 \f1\fs16         neat                    more                    sank\par
}{\plain \fs16 \f1\fs16         soar                    most                    send\par
}{\plain \fs16 \f1\fs16 Output:                         nose                    sent\par
}{\plain \fs16 \f1\fs16         head                    part                    tank\par
}{\plain \fs16 \f1\fs16         bead                    pore                    toad\par
}{\plain \fs16 \f1\fs16         beat                    port            Output:\par
}{\plain \fs16 \f1\fs16         boat                    pose                    no solution\par
}{\plain \fs16 \f1\fs16         boot                    post            -------------------\par
}{\plain \fs16 \f1\fs16         foot            Output:                 If you add "bead" to\par
}{\plain \fs16 \f1\fs16 ------------                    more            the dictionary, then\par
}{\plain \fs16 \f1\fs16                                 lore            there is exactly one\par
}{\plain \fs16 \f1\fs16                                 lose            shortest ladder:\par
}{\plain \fs16 \f1\fs16                                 loss            bank -> band -> bend\par
}{\plain \fs16 \f1\fs16                                 less            -> bead -> bean ->\par
}{\plain \fs16 \f1\fs16                         ------------            lean -> loan\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 7               Example 8               Example 9\par
}{\plain \fs16 \f1\fs16 ------------            ------------            ----------------------------\par
}{\plain \fs16 \f1\fs16 Input:                  Input:                  Input:\par
}{\plain \fs16 \f1\fs16         dish                    push                    hand\par
}{\plain \fs16 \f1\fs16         wash                    pull                    wave\par
}{\plain \fs16 \f1\fs16         6                       10                      10\par
}{\plain \fs16 \f1\fs16         cash                    bulk                    band\par
}{\plain \fs16 \f1\fs16         dash                    bull                    bane\par
}{\plain \fs16 \f1\fs16         dish                    bush                    hand\par
}{\plain \fs16 \f1\fs16         fish                    busk                    land\par
}{\plain \fs16 \f1\fs16         wash                    mule                    lane\par
}{\plain \fs16 \f1\fs16         wish                    mull                    sand\par
}{\plain \fs16 \f1\fs16 Output:                         muse                    sane\par
}{\plain \fs16 \f1\fs16         dish                    mush                    save\par
}{\plain \fs16 \f1\fs16         dash                    pull                    wane\par
}{\plain \fs16 \f1\fs16         wash                    push                    wave\par
}{\plain \fs16 \f1\fs16 OR:                     Output:                 Output:         OR:\par
}{\plain \fs16 \f1\fs16         dish                    push                    hand            hand\par
}{\plain \fs16 \f1\fs16         wish                    bush                    band            land\par
}{\plain \fs16 \f1\fs16         wash                    busk                    bane            lane\par
}{\plain \fs16 \f1\fs16 ------------                    bulk                    wane            wane\par
}{\plain \fs16 \f1\fs16                                 bull                    wave            wave\par
}{\plain \fs16 \f1\fs16                                 pull            OR:             OR:\par
}{\plain \fs16 \f1\fs16                         OR:                             hand            hand\par
}{\plain \fs16 \f1\fs16                                 push                    sand            sand\par
}{\plain \fs16 \f1\fs16                                 mush                    sane            sane\par
}{\plain \fs16 \f1\fs16                                 muse                    save            wane\par
}{\plain \fs16 \f1\fs16                                 mule                    wave            wave\par
}{\plain \fs16 \f1\fs16                                 mull            ----------------------------\par
}{\plain \fs16 \f1\fs16                                 pull            If you add "wand" to the\par
}{\plain \fs16 \f1\fs16                         ------------            dictionary, then there is\par
}{\plain \fs16 \f1\fs16                                                 exactly one shortest ladder:\par
}{\plain \fs16 \f1\fs16                                                 hand -> wand -> wane -> wave\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs24 \b 2002 Contest}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                                Problem Set\par
}{\plain \fs16 \f1\fs16                 2002 ACM High School Programming Contest\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                 DO NOT LOOK AT THE PROBLEMS UNTIL YOU ARE\par
}{\plain \fs16 \f1\fs16                     TOLD TO DO SO BY THE CHIEF JUDGE!!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 REMEMBER:All input comes from the keyboard, and all output goes to the screen.  In all problems, you should\par
}{\plain \fs16 \f1\fs16 output ONLY what is specified.  Do not output debugging information, and do not prompt for input.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You should turn in an executable file called "programN", where N is the problem number. Do NOT turn in source \softline
code.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab    }{\plain \fs16 \b\f1\fs16 Problem 1 --- Fiddling With Small Change}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab    ----------------------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Foreign visitors to the Games will wind up with pockets full of U.S. coins after spending a few weeks in Utah.  \softline
To make it easy for visitors to convert their coins into paper money, the organizers of the Games are planning \softline
to install Automatic Change Machines (ACMs) all around Salt Lake City.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You have been hired to write part of the software for the ACMs.  Your task is to write a program that determines \softline
the total value of a group of U.S. coins.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Write a program that reads one line of input from the keyboard: this line will contain EXACTLY FOUR \softline
number-letter pairs.  An example input to your program is:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab 5 q 0 d 2 n 7 p\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 This line describes a group of U.S. coins: in this case, 5 quarters, 0 dimes, 2 nickels, and 7 pennies.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Each number in the input line will be an integer between 0 and 100, inclusive. Each letter will be one of the \softline
following: 'q' for quarters, 'd' for dimes, 'n' for nickels, and 'p' for pennies.  \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The letters may come in ANY ORDER.  For instance, there is no guarantee that 'q' will come before 'd' in the \softline
input line.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 REPEATS ARE POSSIBLE, but exactly 4 number-letter pairs (no more, no less) will always be input.  1 d 2 d 3 d 4 \softline
d is valid, but 1 d 2 d 3 d is not valid because there are only 3 pairs.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The numbers and letters in the input line are separated from each other by one or more space characters.  The \softline
input line will end with a newline character ('\\n').\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program must compute the total value of the coins in dollars and cents, and then output a single line in \softline
the following form:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab D dollars and C cents\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 where D is the number of whole dollars and C is the number of remaining cents. Print the line exactly as \softline
described, even if D or C (or both) is zero.  The value of C must be at least 0 and not more than 99.  Your \softline
program must print the line exactly as described, then print a newline character (`\\n') and exit.\par
}{\plain \fs16 \f1\fs16 YOUR PROGRAM MUST NOT PRINT ANY OTHER OUTPUT.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 5 q 0 d 2 n 7 p\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 1 dollars and 42 cents\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 1 d 7 q 32 p 5 d\par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 2 dollars and 67 cents\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 3:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\ul0 \tab \par
}{\plain \fs16 \f1\fs16 \tab 0 p 0 q 0 d 0 d\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 0 dollars and 0 cents\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 4:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 100 p 2 q 100 n 5 d\par
}{\plain \fs16 \f1\fs16 \tab \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 7 dollars and 0 cents\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 5:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 80 q 0 d 2 p 1 n\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 20 dollars and 7 cents\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab    }{\plain \fs16 \b\f1\fs16 Problem 2 --- Calculating Times for Teams}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab    -----------------------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The IOC has decided to add a team slalom competition to the list of alpine skiing events.  The times of the four \softline
athletes on each team will be added, and the team with the lowest total time will be the winner.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 To assure the accuracy of each calculation of total times, the IOC asked you to write an Automated Computation \softline
Module (ACM) to add to their scoring software system.  This will input the race time of each competitor, \softline
calculate the totals for all the teams, and output the first, second, and third place teams.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 There will be at least 3, but no more than 26 teams.  The times will be provided to you in a somewhat random \softline
order.  Input to your ACM will be in the form of individual lines with the following format:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 A letter indicating a team (a..z), a space, and a time represented as minutes:seconds (Example:  a 12:34.037)  \softline
This represents the time for one member of team a.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The above input may repeat from 12 to 104 times.  There will be exactly 4 times for each team.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 At the end of the input will be a line with a single character, an asterisk (*).\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program should output the 1st, 2nd, and 3rd place winners in the following format:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      Gold:   Team X  minutes:seconds\par
}{\plain \fs16 \f1\fs16      Silver: Team Y  minutes:seconds\par
}{\plain \fs16 \f1\fs16      Bronze: Team Z  minutes:seconds\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You should correctly report the team that wins the race, as well as printing their total time in minutes and \softline
seconds.  You are guaranteed that there will be three teams that complete the race, and that the winners\par
}{\plain \fs16 \f1\fs16 will be clear (no ties).\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab a 13:52.001 \par
}{\plain \fs16 \f1\fs16 \tab a 19:29.002\par
}{\plain \fs16 \f1\fs16 \tab a 10:34.003\par
}{\plain \fs16 \f1\fs16 \tab a 20:50.004\par
}{\plain \fs16 \f1\fs16 \tab f 10:35.005\par
}{\plain \fs16 \f1\fs16 \tab f 19:35.006\par
}{\plain \fs16 \f1\fs16 \tab f 10:17.007\par
}{\plain \fs16 \f1\fs16 \tab f 21:45.008\par
}{\plain \fs16 \f1\fs16 \tab d 11:13.009 \par
}{\plain \fs16 \f1\fs16 \tab d 20:27.010\par
}{\plain \fs16 \f1\fs16 \tab d 11:18.011\par
}{\plain \fs16 \f1\fs16 \tab d 20:57.012\par
}{\plain \fs16 \f1\fs16 \tab e 11:01.013\par
}{\plain \fs16 \f1\fs16 \tab e 21:28.014\par
}{\plain \fs16 \f1\fs16 \tab e 10:21.015\par
}{\plain \fs16 \f1\fs16 \tab e 19:25.014\par
}{\plain \fs16 \f1\fs16 \tab b 14:01.013\par
}{\plain \fs16 \f1\fs16 \tab b 20:57.012\par
}{\plain \fs16 \f1\fs16 \tab b 11:21.011\par
}{\plain \fs16 \f1\fs16 \tab b 20:35.010\par
}{\plain \fs16 \f1\fs16 \tab c 11:42.009\par
}{\plain \fs16 \f1\fs16 \tab c 21:19.008\par
}{\plain \fs16 \f1\fs16 \tab c 11:44.007\par
}{\plain \fs16 \f1\fs16 \tab c 23:34.006\par
}{\plain \fs16 \f1\fs16 \tab *\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab Gold:   Team f  62:12.026\par
}{\plain \fs16 \f1\fs16 \tab Silver: Team e  62:15.056\par
}{\plain \fs16 \f1\fs16 \tab Bronze: Team d  63:55.042\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab s 22:18.010\par
}{\plain \fs16 \f1\fs16 \tab w 26:43.010\par
}{\plain \fs16 \f1\fs16 \tab w 22:12.010\par
}{\plain \fs16 \f1\fs16 \tab s 25:36.010\par
}{\plain \fs16 \f1\fs16 \tab v 26:21.010\par
}{\plain \fs16 \f1\fs16 \tab v 30:31.010\par
}{\plain \fs16 \f1\fs16 \tab s 26:02.010\par
}{\plain \fs16 \f1\fs16 \tab v 21:49.010\par
}{\plain \fs16 \f1\fs16 \tab w 25:35.010\par
}{\plain \fs16 \f1\fs16 \tab w 29:23.010\par
}{\plain \fs16 \f1\fs16 \tab v 27:22.010\par
}{\plain \fs16 \f1\fs16 \tab s 30:24.010\par
}{\plain \fs16 \f1\fs16 \tab *\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab Gold:   Team w  103:53.040\par
}{\plain \fs16 \f1\fs16 \tab Silver: Team s  104:20.040\par
}{\plain \fs16 \f1\fs16 \tab Bronze: Team v  106:3.040\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab    }{\plain \fs16 \b\f1\fs16 Problem 3 --- Scoring a Curling Match}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab    -------------------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Curling is a highly competitive, strategic sport.  You have been asked by the American Curling Medalists (ACM), \softline
an association of former winners of the Curling World Championships, to help the people who will do the \softline
officiating at the Olympics.  Your task is to write a program that will accurately and definitively determine \softline
the score for one game of curling.  (Your program will be used over the course of the games, so accuracy is very \softline
important.)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 In the sport of curling, two teams throw eight heavy granite stones towards a single target at the other end of \softline
an ice sheet.  The stones glide down the ice and either come to rest near the target, or they knock an \softline
opponent's stone out of play.  The center point of the target is called the tee.  Scoring is done as follows:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Only stones six feet or closer to the tee are scored.  If neither team has a stone within six feet, no score is \softline
awarded.  Otherwise:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 One team may have at least one stone closer to the tee than the other team.  This is the scoring team, the other \softline
team does not score.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The scoring team gets one point for every stone that is closer to the tee than any of the opponent's stones.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 It is possible that stones may be the same distance from the tee.  Stones of opposing teams are considered tied \softline
if they are within 0.001 feet of the same distance to the tee.  No point are awarded for these stones.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your task is to write a program for ACM to determine the score for one game of curling.  Your program will be \softline
provided with measurements (in feet) provided by a super-accurate laser scanner.  \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The input will consist of the following items, each on a separate line:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16    + Coordinates of the tee, specified as floating point numbers (x, y),\par
}{\plain \fs16 \f1\fs16    + The number of stones still in play for the red team (0..8),\par
}{\plain \fs16 \f1\fs16    + One coordinate pair (x, y) for each red team stone,\par
}{\plain \fs16 \f1\fs16    + The number of stones still in play for the blue team (0..8),\par
}{\plain \fs16 \f1\fs16    + One coordinate pair (x, y) for each blue team stone.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your output should be only one of the following three messages:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16     Red scored N points.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16     Blue scored N points.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16     The game ended with no score.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The N above should accurately reflect the resulting score for the scoring team.  If no stones are within 6 feet \softline
of the tee, or if the closest stone for each team is the same distance from the tee, your program should output \softline
the third message.  You should print a return character after the message.\par
}{\plain \fs16 \f1\fs16      \par
}{\plain \fs16 \f1\fs16 If your program outputs more than one message, or if your program outputs any other information (including \softline
prompts or debugging text), it will be judged incorrect.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab -10 0\par
}{\plain \fs16 \f1\fs16 \tab 0\par
}{\plain \fs16 \f1\fs16 \tab 2\par
}{\plain \fs16 \f1\fs16 \tab -2 -6\par
}{\plain \fs16 \f1\fs16 \tab -10 0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab Blue scored 1 points.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 3 3\par
}{\plain \fs16 \f1\fs16 \tab 2\par
}{\plain \fs16 \f1\fs16 \tab 0 7\par
}{\plain \fs16 \f1\fs16 \tab 3 15\par
}{\plain \fs16 \f1\fs16 \tab 1\par
}{\plain \fs16 \f1\fs16 \tab 6 -1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab The game ended with no score.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 3:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 5.0 7.0\par
}{\plain \fs16 \f1\fs16 \tab 3\par
}{\plain \fs16 \f1\fs16 \tab 4.0 7.0\par
}{\plain \fs16 \f1\fs16 \tab 1.0 10.0\par
}{\plain \fs16 \f1\fs16 \tab 0.0 19.0\par
}{\plain \fs16 \f1\fs16 \tab 1\par
}{\plain \fs16 \f1\fs16 \tab 5.0 12.5\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab Red Scored 2 points.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab    }{\plain \fs16 \b\f1\fs16 Problem 4 --- Hidden Countries}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab    ------------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Security around the Games is extremely tight --- not just physical security, but electronic security as well.  \softline
To help spot potential threats, the organizers of the Games have asked you to write a program that looks for \softline
hidden country names in electronic mail --- an Automated Checker of Messages (ACM). For example, consider this \softline
sentence:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab Can a ``dandy'' coach help an amateur reach the Games?\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 If you look carefully, you will find two hidden country names as shown below:\par
}{\plain \fs16 \f1\fs16 \ul0 \tab CAN A ``DAndy'' coach helP AN AMAteur reach the Games?\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The first six letters of the sentence spell CANADA.  Later, the letters spell PANAMA.  A country name \softline
``appears'' in a message when the LETTERS of the country name appear IN ORDER and CONSECUTIVELY as a substring \softline
of the LETTERS of the message.  All non-letter characters in the name and message are disregarded\par
}{\plain \fs16 \f1\fs16 when searching for a match.  Letter case is also ignored.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program must find names such as those hidden in the above example.  Write a program that reads the \softline
following input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16   + A number, indicating how many country names will be input to your program. This number will be between 1 and \softline
10, inclusive.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16   + The names of the countries to be searched for.  Each country name will contain between 1 and 30 characters, \softline
inclusive.  A country name may contain letters (upper- and lower-case), numbers, spaces, and punctuation, but \softline
will always contain at least one letter.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16   + A line of text, which is the message to be scanned for hidden names.  This line will contain between 1 and \softline
100 characters, inclusive.  It may contain letters, numbers, spaces, and punctuation, but will always contain at \softline
least one letter.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Each of these items will be given on a separate input line.  Your program must output the country names that \softline
''appear'' in the message, as defined above. Your program must output the names in the left-to-right order in \softline
which they appear in the message.  Also:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16   + Each name must be output as it was entered in the list of country names, with proper capitalization, \softline
punctuation, and spaces.  DO NOT output the name as it appears in the message.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16   + A single country name may appear more than once in a message.  If this happens, the name should be output \softline
once for each time it appears.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16   + Two or more names may overlap in the message, but you may assume that no two names will start at the same \softline
point in the message.  In other words, you may assume that no country name is a letterwise-prefix of another.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 If one or more country names are found, your program must output the names as described above, with each name on \softline
a separate output line.  If no names are found, your program must output the word "NONE", followed by a newline.  \softline
Your program must exit after printing its output.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\ul0 \tab 3\par
}{\plain \fs16 \f1\fs16 \tab America\par
}{\plain \fs16 \f1\fs16 \tab Canada\par
}{\plain \fs16 \f1\fs16 \tab Panama\par
}{\plain \fs16 \f1\fs16 \tab Can a ``dandy'' coach help an amateur reach the Games?\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output: Canada\par
}{\plain \fs16 \f1\fs16 \tab Panama\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\ul0 \tab 3\par
}{\plain \fs16 \f1\fs16 \tab Spain\par
}{\plain \fs16 \f1\fs16 \tab China\par
}{\plain \fs16 \f1\fs16 \tab Sweden\par
}{\plain \fs16 \f1\fs16 \tab Each in a lane!  An inch in a tight race!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\ul0 \tab China\par
}{\plain \fs16 \f1\fs16 \tab China\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 3:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\ul0 \tab 3\par
}{\plain \fs16 \f1\fs16 \tab China\par
}{\plain \fs16 \f1\fs16 \tab S. Korea\par
}{\plain \fs16 \f1\fs16 \tab United States\par
}{\plain \fs16 \f1\fs16 \tab ``Ask... or... each in a unit,'' Ed states.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\ul0 \tab S. Korea\par
}{\plain \fs16 \f1\fs16 \tab China\par
}{\plain \fs16 \f1\fs16 \tab United States\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 4:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\ul0 \tab 3\par
}{\plain \fs16 \f1\fs16 \tab Yugoslavia\par
}{\plain \fs16 \f1\fs16 \tab Slovakia\par
}{\plain \fs16 \f1\fs16 \tab Turkey\par
}{\plain \fs16 \f1\fs16 \tab A turkey wrecked by Yugo in Slavia... I mean, in Slovakia!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\ul0 \tab Turkey\par
}{\plain \fs16 \f1\fs16 \ul0 \tab Slovakia\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 5:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\ul0 \tab 4\par
}{\plain \fs16 \f1\fs16 \tab Finland\par
}{\plain \fs16 \f1\fs16 \tab India\par
}{\plain \fs16 \f1\fs16 \tab Tibet\par
}{\plain \fs16 \f1\fs16 \tab Tonga\par
}{\plain \fs16 \f1\fs16 \tab Patti bet on Gabbi Fin (#10) landing a medal.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\ul0 \tab Tibet\par
}{\plain \fs16 \f1\fs16 \tab Tonga\par
}{\plain \fs16 \f1\fs16 \tab Finland\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 6:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\ul0 \tab 3\par
}{\plain \fs16 \f1\fs16 \tab Togo\par
}{\plain \fs16 \f1\fs16 \tab Latvia\par
}{\plain \fs16 \f1\fs16 \tab Kenya\par
}{\plain \fs16 \f1\fs16 \tab Can Ada and Ken (yawn!) go to your flat, Vi, at Bracken Yard?\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\ul0 \tab Kenya\par
}{\plain \fs16 \f1\fs16 \tab Latvia\par
}{\plain \fs16 \f1\fs16 \tab Kenya\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 7:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\ul0 \tab 1\par
}{\plain \fs16 \f1\fs16 \tab Chile\par
}{\plain \fs16 \f1\fs16 \tab Has Chi-Chi tried the Chili?  It takes away the chill, easily!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output: NONE\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab }{\plain \fs16 \b\f1\fs16 Problem 5 - Blue Fences Everywhere!}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab -----------------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The one thing that most characterizes an outdoor Olympic venue is fences. Miles and miles of blue mesh fences.  \softline
There are fences to keep unauthorized people off the field of play.  Fences to keep members of the press in \softline
specific areas where they are allowed to interview athletes after events.  Fences to mark paths where spectators \softline
must walk to get to their viewing spots.  Bottom line is that each venue is A Confusing Maze (ACM) of fences.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Most events have short breaks when spectators could visit a concession stand. The first problem at such times is \softline
to find that concession.  The second is to decide whether or not you have time to get there and back before the\par
}{\plain \fs16 \f1\fs16 competition resumes.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 With that in mind, you decide to write a program on your pocket computer that will input a map of an Olympic \softline
venue and output the length of the shortest path from you to the concession.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 To simplify your task, you decide that your program will input the venue map as a 2-dimensional array of points, \softline
each of which represents a point on the ground.  Also, it will only calculate the sum of horizontal (x) and \softline
vertical (y) components of the shortest path, without considering diagonals.  You may assume for this program \softline
that no venue is more than 25 points wide and 25 points high.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input Format:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab x_size_of_venue y_size_of_venue\par
}{\plain \fs16 \f1\fs16 \tab Row 1\par
}{\plain \fs16 \f1\fs16 \tab Row 2\par
}{\plain \fs16 \f1\fs16 \tab .\par
}{\plain \fs16 \f1\fs16 \tab .\par
}{\plain \fs16 \f1\fs16 \tab .\par
}{\plain \fs16 \f1\fs16 \tab Row N\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The input array will have the following values:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab '.' = open area\par
}{\plain \fs16 \f1\fs16 \tab 'Y' = your location\par
}{\plain \fs16 \f1\fs16 \tab 'C' = concession location\par
}{\plain \fs16 \f1\fs16 \tab 'x' = fence\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The coordinate of the upper left point in the array is 0,0.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program should output only one line.  It should output only the integer distance of the shortest path from \softline
you to the concession , OR if there is no way to get there without crossing a fence, it should output the \softline
following:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab Can't get there\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Remember, you may not move diagonally!  You do NOT need to print out the path.\par
}{\plain \fs16 \f1\fs16 Example #1:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 22 3\par
}{\plain \fs16 \f1\fs16 \tab xxxxxxxxxxxxxxxxxxxxxxx\par
}{\plain \fs16 \f1\fs16 \tab x.Y.................C.x\par
}{\plain \fs16 \f1\fs16 \tab xxxxxxxxxxxxxxxxxxxxxxx\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 18\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example #2:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 24 7\par
}{\plain \fs16 \f1\fs16 \tab xxxxxxxxxxxxxxxxxxxxxxxx\par
}{\plain \fs16 \f1\fs16 \tab x.......x.x..x........Cx\par
}{\plain \fs16 \f1\fs16 \tab x.xxxxxxx.x.xxxxxx.xx.xx\par
}{\plain \fs16 \f1\fs16 \tab x.........x.Y......xx.xx\par
}{\plain \fs16 \f1\fs16 \tab x...xxxxxxx..xx..xxxxxxx\par
}{\plain \fs16 \f1\fs16 \tab x............x.........x\par
}{\plain \fs16 \f1\fs16 \tab xxxxxxxxxxxxxxxxxxxxxxxx\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 12\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example #3:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 17 6\par
}{\plain \fs16 \f1\fs16 \tab xxxxxxxxxxxxxxxxx\par
}{\plain \fs16 \f1\fs16 \tab x.Y.x..C.xx.xxxxx\par
}{\plain \fs16 \f1\fs16 \tab x...x.......xxxxx\par
}{\plain \fs16 \f1\fs16 \tab x...xxxxxxxxx...x\par
}{\plain \fs16 \f1\fs16 \tab x...............x\par
}{\plain \fs16 \f1\fs16 \tab xxxxxxxxxxxxxxxxx\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab Can't get there\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \b\fs16 \par
}{\plain \fs16 \b\fs16 2003 Contest}{\plain \fs16 \fs16 \par
}{\plain \fs16 \fs16 \par
}{\plain \fs16 \b\f1\fs16 \ul0 \tab \ul0 \tab Problem 1 -Irish Names}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab ----------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Recently, Active Children's Magazine (ACM) published an article about the St. Patrick's Day Parade in Salt Lake \par
}{\plain \fs16 \f1\fs16 City. The parade is being organized by Mike O'Reily and Steve O'Malley. Unfortunately, the journalist thought \softline
their names were Mike Reily and Steve Malley, so there were errors in the article. The editor figured out a \softline
solution to the problem. He ordered you to write a computer program that inputs a line of text and outputs the \softline
same line with the characters O (upper case O) and ' (apostrophe) added before any upper case letter. Input to \softline
your program will be a single line of text. Your program output must also be a single line of text, as described \softline
above, ending in a newline ('\\n') character. If your program produces any other output it will be judged \softline
incorrect.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  EXAMPLES\par
}{\plain \fs16 \f1\fs16  --------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Example 1:\par
}{\plain \fs16 \f1\fs16  ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Input: Reily and Malley are organizing the parade.\par
}{\plain \fs16 \f1\fs16  Output: O'Reily and O'Malley are organizing the parade.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Example 2:\par
}{\plain \fs16 \f1\fs16  ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Input: You will complete the tasks for ACM.\par
}{\plain \fs16 \f1\fs16  Output: O'You will complete the tasks for O'AO'CO'M.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab }{\plain \fs16 \b\f1\fs16 Problem 2 -- The Leprechaun's Treasure}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab --------------------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You catch a leprechaun named Andrew Conor McCabe (ACM for short), and demand that he give you \par
}{\plain \fs16 \f1\fs16 his Treasure. Reluctantly he leads you to a big pot in the woods. Much to your dismay the pot is not full of \softline
gold, but just a bunch of Irish coins (punts and Irish cents). Before you can take the money Andrew must account \softline
for the loss in his financial records. The leprechauns record all their transactions using the old Irish \softline
monetary system. Andrew knows the exact amount of money in the pot, but must enter the equivalent amount in \softline
terms of the old Irish coins. In order to keep his accounting simple he wants to record the minimum number of \softline
each of the old coins (farthings, pennys, shillings, florins, crowns, and pounds) necessary to have the same \softline
value as the amount of money in the pot. You'd better help the Leprechaun, as his math is a bit rusty. Hurry and 
don't take your eyes off him, or he and his Treasure might disappear. In Ireland the standard unit of currency \softline
is the punt, which is similar to the dollar. Before the introduction of this decimal system in 1971, the Irish \softline
used a non-decimal currency where conversions were not straight forward. (It was kind of like using feet and \softline
inches rather than meters and centimeters) Your program will read two lines of input, each containing a single \softline
integer. The first number represents the number of punts in the pot, and the second number represents the number \softline
of Irish cents (1/100th of a punt) that are in the pot. The first number can range between 0 and 9999, and the \softline
second number between 0 and 99. An example of input to the program would be: 101 1 This represents 101 punts and \softline
1 Irish cent. Note, either number may be zero, and a newline character will end each input line. You should read \softline
in this input, and convert it to a floating point number of punts. The pence is a unit in the Old Irish "non-decimal" system. Once you have the number of punts you can convert the quantity to pence using the following \softline
conversion. 1 punt = 240 pence. Pence can be converted into the other units in the old system using the \softline
following conversions. 1 farthing = .25 pence 1 penny = 1 pence 1 shilling = 12 pence 1 florin = 24 pence 1 \softline
crown = 60 pence 1 pound = 240 pence You should now compute the number of each of the coin types that will \softline
result in the smallest number of total coins, but still have the same value as the input amount. Your output \softline
must be a single line with the number of each type of coin, followed by the name of that type of coin, as \softline
follows: 101 pounds 0 crowns 0 florins 0 shillings 2 pennies 2 farthings where the numbers are replaced by the \softline
correct numbers for the given input. Each word and each number are separated by one space, and a new line \softline
character must end the line of output. Note, even if the amount of a type of coin is 0 or 1 the output must \softline
remain as above. HINT: Do not round any numbers until you calculate the number of farthings. At that point round \softline
up to the next highest farthing. Thus, 2.01 farthings would be output as "3 farthings". Even though 4 farthings \softline
is equal to one Penny, an answer of 4 farthings is acceptable where the number of farthings has been rounded up. \softline
(For example, 1 penny and 3.048 farthings should be output as 1 penny and 4 farthings, not 2 pennies).\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  EXAMPLES\par
}{\plain \fs16 \f1\fs16  -------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Example 1:\par
}{\plain \fs16 \f1\fs16  ---------\par
}{\plain \fs16 \f1\fs16 Input: 1\par
}{\plain \fs16 \f1\fs16        25\par
}{\plain \fs16 \f1\fs16 Output: 1 pounds 1 crowns 0 florins 0 shillings 0 pennies 0 farthings \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Example 2:\par
}{\plain \fs16 \f1\fs16  ---------\par
}{\plain \fs16 \f1\fs16 Input: 17\par
}{\plain \fs16 \f1\fs16        94\par
}{\plain \fs16 \f1\fs16 Output: 17 pounds 3 crowns 1 florins 1 shillings 9 pennies 3 farthings \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Example 3:\par
}{\plain \fs16 \f1\fs16  --------- \par
}{\plain \fs16 \f1\fs16 Input: 1\par
}{\plain \fs16 \f1\fs16        2 \par
}{\plain \fs16 \f1\fs16 Output: 1 pounds 0 crowns 0 florins 0 shillings 4 pennies 4 farthings  \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab }{\plain \fs16 \b\f1\fs16 Problem 3 --- Picking out the Shamrocks}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab ---------------------------------------\tab \tab \par
}{\plain \fs16 \f1\fs16  \par
}{\plain \fs16 \f1\fs16 The economy is down, and businesses are looking for ways to boost their revenues. American \par
}{\plain \fs16 \f1\fs16 Circle Manufacturers (ACM) have decided that they will increase their income by producing drawings of shamrocks \softline
for St. Patrick's Day. The only problem is, the software that ACM uses doesn't allow them to see their designs \softline
before they get printed. To help ACM save money on printer ink, you've been asked to write a program that will \softline
determine whether or not a design constitutes a shamrock. A design consists of three circles, each defined by a \softline
center point and a radius. A design is considered to be a shamrock if both of the following conditions are met: \softline
1. Each circle overlaps both of the other two circles. Circle A overlaps Circle B if there is at least one point \softline
in Circle A that is also in Circle B. This means that two circles that are tangent to one another are considered \softline
to overlap. ("Tangent" means that they have just one point in common.) 2. None of the circles are enclosed by \softline
another circle. Circle A is enclosed by Circle B if every point in Circle A is also within Circle B. This means \softline
that one circle can be tangent to another and still be enclosed in it. The input to your program will be nine \softline
lines of text, each group of lines describing one circle. A group of three lines will consist of three floating \softline
point numbers, one per line. The first two numbers represent the X and Y coordinates, respectively, of the \softline
center point. The third number represents the radius of the circle. Your program must compute whether or not the \softline
given circles form a shamrock and then print out either "yes" or "no" (without the quotes). Your program must \softline
print one of these two words exactly as shown, and then print out a newline character ('\\n') and exit. If your \softline
program produces any other output, it will be judged incorrect. Reminder: The formula for determining the \softline
distance between the points (x1,y1) and (x2,y2) is as follows: d = sqrt( (x2-x1)^2 + (y2-y1)^2 ) \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 EXAMPLES \par
}{\plain \fs16 \f1\fs16 -------- \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Example 1 (no intersections):\par
}{\plain \fs16 \f1\fs16  ---------------------------- \par
}{\plain \fs16 \f1\fs16 Input: 10.0\par
}{\plain \fs16 \f1\fs16        20.0\par
}{\plain \fs16 \f1\fs16        10.0\par
}{\plain \fs16 \f1\fs16        30.0\par
}{\plain \fs16 \f1\fs16        40.0\par
}{\plain \fs16 \f1\fs16         5.0\par
}{\plain \fs16 \f1\fs16        50.0\par
}{\plain \fs16 \f1\fs16        50.0\par
}{\plain \fs16 \f1\fs16         5.0 \par
}{\plain \fs16 \f1\fs16 Output: no  \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Example 2 (all three intersect):\par
}{\plain \fs16 \f1\fs16  -------------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input: 25.8\par
}{\plain \fs16 \f1\fs16        25.8\par
}{\plain \fs16 \f1\fs16        30.2\par
}{\plain \fs16 \f1\fs16        45.8\par
}{\plain \fs16 \f1\fs16        25.8\par
}{\plain \fs16 \f1\fs16        30.2\par
}{\plain \fs16 \f1\fs16        35.8\par
}{\plain \fs16 \f1\fs16        43.6\par
}{\plain \fs16 \f1\fs16        30.2 \par
}{\plain \fs16 \f1\fs16 Output: yes \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Example 3 (one circle enclosed in another):\par
}{\plain \fs16 \f1\fs16  ------------------------------------------\par
}{\plain \fs16 \f1\fs16 Input: 75.0\par
}{\plain \fs16 \f1\fs16        20.0\par
}{\plain \fs16 \f1\fs16        40.0\par
}{\plain \fs16 \f1\fs16        70.0\par
}{\plain \fs16 \f1\fs16        20.0\par
}{\plain \fs16 \f1\fs16        10.0\par
}{\plain \fs16 \f1\fs16        20.0\par
}{\plain \fs16 \f1\fs16        20.0\par
}{\plain \fs16 \f1\fs16        45.0 \par
}{\plain \fs16 \f1\fs16 Output: no \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Example 4 (two circles are tangent):\par
}{\plain \fs16 \f1\fs16  ----------------------------------- \par
}{\plain \fs16 \f1\fs16 Input: 15.0\par
}{\plain \fs16 \f1\fs16        15.0\par
}{\plain \fs16 \f1\fs16        15.0\par
}{\plain \fs16 \f1\fs16        15.0\par
}{\plain \fs16 \f1\fs16        45.0\par
}{\plain \fs16 \f1\fs16        15.0\par
}{\plain \fs16 \f1\fs16        45.0\par
}{\plain \fs16 \f1\fs16        15.0\par
}{\plain \fs16 \f1\fs16        30.0 \par
}{\plain \fs16 \f1\fs16 Output: yes\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab }{\plain \fs16 \b\f1\fs16 Problem 4 - Find That Pot O' Gold!}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab ----------------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 (lep-re-chaun, n; in Irish folklore, a small man with magical powers, often dressed in green, who works as a \par
}{\plain \fs16 \f1\fs16 shoemaker and is believed to know where treasure is hidden) That little green man is at it again! But this time \softline
he's gone too far -- it's *your* pot o' gold that he's stolen and hidden somewhere in his kingdom. Your task is \softline
to design an Ancient Celtic Magnet (ACM) to assist you in your search for the leprechaun and the stolen money.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 To simplify your task, you decide your program should input the leprechaun's kingdom as a 2-dimensional array of \softline
characters. It will then calculate the start and end coordinates of the "magic word" that will show you where \softline
your gold is hidden. Be assured that no kingdom will be larger than 20 characters wide by 20 characters high. \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input Format:\par
}{\plain \fs16 \f1\fs16      number_of_rows (N)\par
}{\plain \fs16 \f1\fs16      length_of_each_row\par
}{\plain \fs16 \f1\fs16      row 0\par
}{\plain \fs16 \f1\fs16      row 1\par
}{\plain \fs16 \f1\fs16      ...\par
}{\plain \fs16 \f1\fs16      row N-1\par
}{\plain \fs16 \f1\fs16      magic_word_to_find\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 NOTE: The coordinate of the upper-left corner of the array is [0,0]. Words can be found in any direction, i.e. \softline
forward, backward, up, down, or diagonal.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program should output one line only, namely the start and end coordinates of the word in the following \softline
format:\par
}{\plain \fs16 \f1\fs16      [x1,y1] -> [x2,y2]\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Just in case the leprechaun plays a practical joke on you, you should output the following if the word isn't \softline
found:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Not found\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Remember not to output any extra information, and good luck in your search for that pot o' gold! \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  EXAMPLES\par
}{\plain \fs16 \f1\fs16  -------- \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Example 1:\par
}{\plain \fs16 \f1\fs16  --------- \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16      3\par
}{\plain \fs16 \f1\fs16      10\par
}{\plain \fs16 \f1\fs16      aaaaaaaaaa\par
}{\plain \fs16 \f1\fs16      apotogolda\par
}{\plain \fs16 \f1\fs16      aaaaaaaaaa\par
}{\plain \fs16 \f1\fs16      potogold \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16      [1,1] - [8,1]  \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Example 2:\par
}{\plain \fs16 \f1\fs16  --------- \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16       7\par
}{\plain \fs16 \f1\fs16       7\par
}{\plain \fs16 \f1\fs16       aaaaaaa\par
}{\plain \fs16 \f1\fs16       aaaaaaa\par
}{\plain \fs16 \f1\fs16       aaaaaaa\par
}{\plain \fs16 \f1\fs16       aaaaaaa\par
}{\plain \fs16 \f1\fs16       aaaaaaa\par
}{\plain \fs16 \f1\fs16       aaaaaaa\par
}{\plain \fs16 \f1\fs16       aaaaaaa\par
}{\plain \fs16 \f1\fs16       leprechaun \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16       Not found \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Example 3:\par
}{\plain \fs16 \f1\fs16  --------- \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16       15\par
}{\plain \fs16 \f1\fs16       15\par
}{\plain \fs16 \f1\fs16       dtughrikbalboai\par
}{\plain \fs16 \f1\fs16       cedirgamaripmel\par
}{\plain \fs16 \f1\fs16       aorieznrcordoba\par
}{\plain \fs16 \f1\fs16       ymtiggnirenorkf\par
}{\plain \fs16 \f1\fs16       ichayenolleukeg\par
}{\plain \fs16 \f1\fs16       unrcytdollarolh\par
}{\plain \fs16 \f1\fs16       gadzakdobrindoa\par
}{\plain \fs16 \f1\fs16       urekkrbximahksn\par
}{\plain \fs16 \f1\fs16       ofadiidatesecei\par
}{\plain \fs16 \f1\fs16       layirgnillihcsn\par
}{\plain \fs16 \f1\fs16       inaraugnqboayce\par
}{\plain \fs16 \f1\fs16       sonnrioleusltug\par
}{\plain \fs16 \f1\fs16       ariohlhgtreaodn\par
}{\plain \fs16 \f1\fs16       lkkwodnuopptloa\par
}{\plain \fs16 \f1\fs16       asucrepikwanzal\par
}{\plain \fs16 \f1\fs16       schilling \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16       [13,9] - [5,1]  \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab \tab }{\plain \fs16 \b\f1\fs16 Problem 5 -- Let the River Flow Green!}{\plain \fs16 \f1\fs16  \par
}{\plain \fs16 \f1\fs16 \tab \tab --------------------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The citizens of Dublin need your help! For St. Patrick's Day, they want to dye the River Liffey green. What they \softline
need from you is the software to run their Aquatic Coloring Machine (ACM). You'll get a map of the river banks, \softline
and the location of one point that's in the river. You need to color every square that is connected to that \softline
point, without coloring any land (including islands). You must also go under bridges, but you will not color \softline
them. A point is defined as being "connected" to another point if it is adjacent either horizontally, \softline
vertically, or diagonally. The maps are rectangular arrays. Each point in the array contains one of the \softline
following characters: . Uncolored land or water x River banks - don't color B Bridge - don't color, but remember \softline
that water goes underneath G Green - starting point and places you've colored Input to your program will be one \softline
line with the number of rows in the map, one line with the length of each row in the map, and then the map \softline
itself. Your program will output the number of squares to be colored, including the start square, on one line, \softline
followed by the final map with all the connected water colored green. Each map will have no more than 100 rows \softline
and no more than 80 characters per row. \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  EXAMPLES\par
}{\plain \fs16 \f1\fs16  -------- \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16  Example 1 (simple):\par
}{\plain \fs16 \f1\fs16  ------------------ \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input: 8 10 ...x...... ..xx...... xxx.....xx ....G..xx. .....xxx.. ..xxxx.... xxx....... .......... \par
}{\plain \fs16 \f1\fs16 Output: 31 ...xGGGGGG ..xxGGGGGG xxxGGGGGxx GGGGGGGxx. GGGGGxxx.. GGxxxx.... xxx....... ..........  \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2 (showing a diagonal connection): ----------------------------------------- \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input: 10 15 ...x.........G. ..xx........... xx......xxxx... .......xx..xx.. .....xxx....xxx ..xxxx.......xx \softline
xxx...........x ............... ..........xxxx. ......xxxxx..xx \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output: 52 GGGxGGGGGGGGGGG GGxxGGGGGGGGGGG xxGGGGGGxxxxGGG GGGGGGGxx..xxGG GGGGGxxx....xxx GGxxxx.......xx \softline
xxx...........x ............... ..........xxxx. ......xxxxx..xx \par
}{\plain \fs16 \f1\fs16 Example 3 (showing a bridge): ----------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input: 10 15 ...x.........G. ..xx........... xxxBBBBBxxxx... .......xx..xx.. .....xxx....xxx ..xxxx.......xx \softline
xxx...........x ............... ..........xxxx. ......xxxxx..xx \par
}{\plain \fs16 \f1\fs16 Output: 41 ...xGGGGGGGGGGG ..xxGGGGGGGGGGG xxxBBBBBxxxxGGG GGGGGGGxx..xxGG GGGGGxxx....xxx GGxxxx.......xx \softline
xxx...........x ............... ..........xxxx. ......xxxxx..xx  \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 4 (showing a bridge with a diagonal connection underneath): ---------------------------------- \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input: 7 20 x....xx.......xx.xxx ......xxx......x..xx .......xxx.....x...x ......xxxxx..BBBxx.. \softline
.........xxxBB...xxG ..xxxx..xx........xx xxx..xxxx......xxxxx \par
}{\plain \fs16 \f1\fs16 Output: 46 x....xxGGGGGGGxxGxxx ......xxxGGGGGGxGGxx .......xxxGGGGGxGGGx ......xxxxxGGBBBxxGG \softline
.........xxxBBGGGxxG ..xxxx..xxGGGGGGGGxx \par
}\pard \fs16
{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs24 \b 2004 Contest}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \b\f1\fs16 Problem 1 -The ides of March is 'r'}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 ----------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16      SOOTHSAYER. Caesar!\par
}{\plain \fs16 \f1\fs16      CAESAR. Ha! Who calls?\par
}{\plain \fs16 \f1\fs16      CASCA. Bid every noise be still. Peace yet again!\par
}{\plain \fs16 \f1\fs16      CAESAR. Who is it in the press that calls on me?\par
}{\plain \fs16 \f1\fs16              I hear a tongue, shriller than all the music,\par
}{\plain \fs16 \f1\fs16              Cry "Caesar." Speak, Caesar is turn'd to hear.\par
}{\plain \fs16 \f1\fs16      SOOTHSAYER. Beware the ides of March.\par
}{\plain \fs16 \f1\fs16      CAESAR. What man is that?\par
}{\plain \fs16 \f1\fs16      BRUTUS. A soothsayer you beware the ides of March.\par
}{\plain \fs16 \f1\fs16      CAESAR. Set him before me let me see his face.\par
}{\plain \fs16 \f1\fs16      CASSIUS. Fellow, come from the throng; look upon Caesar.\par
}{\plain \fs16 \f1\fs16      CAESAR. What say'st thou to me now? Speak once again.\par
}{\plain \fs16 \f1\fs16      SOOTHSAYER. Beware the ides of March.\par
}{\plain \fs16 \f1\fs16      CAESAR. He is a dreamer; let us leave him. Pass.\par
}{\plain \fs16 \f1\fs16                    - "Julius Caesar", Shakespeare\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 Julius had the misconception that "ides" means "middle", so he thought he might be able to find the soothsayer's \softline
real message by decoding the middle letters of all the messages he received during the month of March.  He \softline
decided to commission the construction of an Automatic Centerpoint Machine (ACM) that\par
}\pard \fs16\tx-360\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8640
{\plain \fs16 \f1\fs16 he can run on all of his incoming email.  The job falls to you.  Time is of the utmost importance so that Julius \softline
can figure out what he needs to beware of.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 You are to write a program that takes a line of input, finds the middle character, and compares it to the \softline
character on the second line of input.  If they are the same, your program will print "Beware!".  If they are \softline
not the\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 same, your program will print "All is clear.". Note that in a string with an even number of characters, we \softline
define the middle character to be the first of the two characters in the middle.  For example '2' is the middle \softline
character in the string "1234".\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input to your program will be two lines.  The first line will contain a string no more than 100 characters in \softline
length, and the second line will contain a single non-blank character.  Your program output must be a single \softline
line of text, as described above, ending in a newline ('\\n') character.  If your program produces any other \softline
output it will be judged incorrect.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab \tab \tab EXAMPLES\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab \tab \tab --------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 1:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab March\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab r\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Beware!\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 2:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab March\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab a\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab All is clear.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 3:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Shakespeare, William\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \ul0 \tab r\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Beware!\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab }{\plain \fs16 \b\fs16 Problem 2 -- Roman Numerals\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs20 \b\fs20 \tab \tab ---------------------------}{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Archaeologists have recently unearthed a cache of scrolls that were created during the time of Julius Caesar.  \softline
They contain tables of numbers that are thought to be tax records maintained by the Archivus Centaurius \softline
Mathematicus(ACM), which was the Roman equivalent of the Internal Revenue Service (IRS).\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Of course, all the records are in Roman numbers, so translating them to our number system would be a very \softline
tedious task.  The archaeologists have decided to scan them into the computer and hire you to write a program \softline
that converts Roman numbers to ours.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 There are seven different digits in the Roman number system.  They are listed here, along with their \softline
corresponding value:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab M - 1000\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab D - 500\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab C - 100\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab L - 50\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab X - 10\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab V - 5\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab I - 1\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 To compose a Roman number, one simply appends as many of these digits as necessary to add up to the desired \softline
number.  The digits are normally listed in order of decreasing value.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Unfortunately, this resulted in some very long numbers, so the Romans added a special rule that the value of a \softline
digit would be subtracted, rather than added, to the total if the immediately following digit is larger.  Thus:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16    1. An I preceding a V or an X becomes -1.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16    2. An X preceding an L or a C becomes -10.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16    3. A C preceding a D or an M becomes -100.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Thus, IX represents 9 (-1 + 10), and CM represents 900 (-100 + 1000).  By following these rules, no digit occurs \softline
more than three times in a row in any number between 1 and 3999.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input to your program will be a Roman number with no more than 15 digits. It will be a combination of the seven \softline
Roman digits that follows the rules described above.  Your program is to calculate the value of that number and\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 output its value, followed by a newline character ('\\n').  If your program produces any other output it will be \softline
judged incorrect.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16      \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab \tab \tab EXAMPLES\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab \tab \tab -------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 1:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab MDCLXVI\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 1666\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 2:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab IX\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 9\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 3:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab MMIV\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 2004\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 4:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab CDXXXVI\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \ul0 \tab 436\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 5 (number with largest possible value):\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ----------------------------------------------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab MMMCMXCIX\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 3999\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 6 (number with the most possible digits):\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ------------------------------------------------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab MMMDCCCLXXXVIII\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 3888\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs20\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab }{\plain \fs20 \b\fs20 Problem 3 --- The Answer is in the Stars\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs20 \b\fs20 \tab \tab ----------------------------------------}{\plain \fs16 \f1\fs16 --------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Before Julius Caesar was assassinated in 44 BC, a soothsayer named Spurinna warned him to "Beware the ides of \softline
March".\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 HOW DID SPURINNA KNOW ABOUT THE IMPENDING ASSASSINATION?\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 People have tried to answer this question for more than two thousand years, but with little success.  The \softline
Astrological Code Meisters (ACM) think they have the answer.  They say that Spurinna was able to foretell \softline
Caesar's future by studying patterns made by the stars that were visible in Rome at the time of his death.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ACM scientists theorize that the secret information is encoded in the shapes formed by groups of four stars.  \softline
They claim that these shapes have a special meaning for the future.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 It turns out that there are only six possibilities for the shape made by the lines connecting any four points:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16    1. Square - all four sides are the same length, all angles are right\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16    2. Rectangle - opposite sides are the same length, all angles are right\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16    3. Rhombus - all four sides are the same length, no right angles\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16    4. Parallelogram - opposite sides are parallel, no right angles\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16    5. Trapezoid - two sides are parallel, two sides are not\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16    6. Tetragon - any general four-sided figure\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 To completely understand the stars that were in the sky in March of 44 BC,they have to generate a huge number of \softline
shapes.  There are just too many stars to do it by hand, so they ask you to help them by writing a shape \softline
recognizing program that calculates the shape made by any four points.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input to your program will be four lines of text.  Each line will contain two integers: the X and Y coordinates \softline
of a point.  You may assume that the input points are listed in order; i.e., if your program inputs A then B \softline
then C then D, then lines AB, BC, CD, and DA are the four sides of the tetragon.  No three points will be on the \softline
same line.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Your program must output a single word that describes the shape formed by the lines connecting the four points - \softline
Square, Rectangle, Rhombus, Parallelogram,Trapezoid, or Tetragon - followed by a newline character ('\\n').  The \softline
program must output the most restrictive shape category; for example, a shape that is a Square is also a \softline
Rectangle, but the correct answer would be a Square because it is more restrictive.  (Note that the above list \softline
is in order of decreasing restrictiveness.)\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab \tab \tab EXAMPLES\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab \tab \tab --------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 1:\ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab Exampmle 2:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\tab \tab \tab \tab ----------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 0 0\ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab 0 0\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 1 0\ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab 1 0\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 1 1\ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab 1 2\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 0 1\ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab 0 2\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Square\ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab \ul0 \tab Rectangle\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 3:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 0 0\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 2 -1\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 4 0\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 2 1\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Rhombus\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 4:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 0 0\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 1 0\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 2 1\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 1 1\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Parallelogram\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 5:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 4 0\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 2 3\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 0 3\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 0 0\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Trapezoid\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 6:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 1 2\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 3 3\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 4 0\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 0 0\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Tetragon\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 7:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 0 1\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 1 2\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 2 1\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 1 0\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Square\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs20\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab     }{\plain \fs20 \b\fs20 Problem 4 - Roman Poetry\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs20 \b\fs20 \tab \tab         ----------------------------------}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 When in Rome, do as the Romans.  In order to impress Caesar and secure your place in the empire, you'll need to \softline
know how the Romans do poetry.  The famous sonnet served Shakespeare well in England, but it won't get you too \softline
far with the newest styles in Rome.  Everyone seems to have fallen in love with simple "word square" poems, i.e. \softline
the ones that read the same horizontally as they do vertically.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Your task is to design an Acrostic Composition Maker (ACM) to assist you in making these bizarre poems.  Because \softline
of the lack of literacy throughout the Empire, you decide to keep your poetry simple by only using 5-letter \softline
words.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Your program will take five 5-letter words as input, one per line.  All letters will be lower case, since the \softline
Romans didn't know about upper case in 44 BC.  It will then determine if these words can be arranged into a \softline
Roman poem that reads the same horizontally and vertically.  If so, your program should output the given words, \softline
one per line, in the correct order.  Otherwise,it should output the following single line:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Not possible\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Be careful not to output any extra information, and good luck in your quest for an enhanced imagination!\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab \tab \tab EXAMPLES\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab \tab \tab --------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 1:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab minor\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \ul0 \tab roman\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab avoid\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab nerdy\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab olive\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab roman\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab olive\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab minor\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab avoid\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab nerdy\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 2:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab abcde\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab abcde\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab abcde\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab abcde\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab abcde\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Not possible\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 3:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab homer\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab march\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab achoo\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab rheum\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab coupe\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab march\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab achoo\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab rheum\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab coupe\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab homer\ul0 \tab \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs20\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab }{\plain \fs20 \b\fs20 Problem 5 -- All Roads Lead Out Of Rome\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs20 \b\fs20 \tab \tab ---------------------------------------}{\plain \fs16 \f1\fs16 -----------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Defying history, Julius Caesar has heeded the soothsayer's advice to "Beware the ides of March" and is making \softline
himself scarce in Rome.  He's going to wait for the heat from Brutus and his gang to pass by going to stay with \softline
a buddy in Byzantium (not Istanbul OR Constantinople).  As Caesar's travel agent, it's your job to take him away \softline
from this terrible calamity (Abducto Calamitas Maximus (ACM)), and you'd better get him there as fast as you \softline
can, or you'll be going head-to-head with a lion in the Coliseum.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 You're to write a program that finds the fastest route from Rome to Byzantium. Input to your program be a list \softline
of the roads that connect pairs of cities in the Roman Empire.  Output will be the route that Caesar should take \softline
to get to Byzantium as quickly as possible.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 The first line of input to your program will contain a single integer - the number of roads in the Empire.  This \softline
will be followed by a list of roads, one per line.  Each road specification consists of a space-separated list \softline
of a starting city, an ending city, and an integer indicating how many days it takes to travel the road.  Note \softline
that you can, of course, travel a road in either direction; thus, if a road is listed as going from Rome to \softline
Venice, you could also take it from Venice to Rome.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Your program should find the shortest route (measured in days) from Rome to Byzantium.  It should then output a \softline
line containing the number of days the trip will take, followed by a list of the cities Caesar will pass \softline
through. The cities along the route should be listed one per line, in order, starting with Rome and ending with \softline
Byzantium.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 City names will be no longer than 20 characters, there will never be more than 100 roads, and there will never \softline
be more than 100 cities.  There will always be a path between the starting and ending cities, and there will be \softline
only one shortest path (i.e., if the shortest trip possible is 10 days, then there will be only one path that \softline
takes 10 days).  All roads will have a travel time of at\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 least one day.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab \tab \tab EXAMPLES\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab \tab \tab \tab --------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 1 (simple path):\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 -----------------------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 4\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Rome Venice 10\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \ul0 \tab Venice Athens 20\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Athens Thrace 2\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Athens Byzantium 25\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 55\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Rome\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Venice\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Athens\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Byzantium\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 2 (shortest trip in days may not have the fewest number of cities):\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 --------------------------------------------------------------------------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 5\par
}\pard \fs20\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs20 \f1\fs20 \tab Rome Istropolis 30\par
}\pard \fs20\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs20 \f1\fs20 \tab Istropolis Byzantium 40\par
}\pard \fs20\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs20 \f1\fs20 \tab Rome Verona 10\par
}{\plain \fs20 \f1\fs20 \tab Verona Philippi 15\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Philippi Byzantium 10\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 35\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Rome\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Verona\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Philippi\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Byzantium\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 3 (more complex):\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ------------------------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 12\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Rome Gallia 4\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Verona Senia 6\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Mursa Senia 10\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Rome Verona 6\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Epidaurus Macedonia 10\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Epidaurus Verona 4\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Philippi Byzantium 15\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Byzantium Macedonia 5\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Senia Salona 2\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Epidaurus Gallia 10\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Mursa Macedonia 15\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Philippi Senia 20\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 25\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Rome\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab Verona\par
}\pard \fs20\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs20 \f1\fs20 \tab Epidaurus\par
}{\plain \fs20 \f1\fs20 \tab Macedonia\par
}{\plain \fs20 \f1\fs20 \tab Byzantium\par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs24 \b 2005 Contest}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 REMEMBER:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 All input comes from the keyboard, and all output goes to the screen.  In all problems, you should output ONLY \softline
what is specified.Do not output debugging information, and do not prompt for input.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 You should turn in an executable file called "programN" for C++ programs or "programN.class" for Java programs, \softline
where N is the problem number. Do NOT turn in source code.\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 \tab \tab }{\plain \fs16 \b\f1\fs16 Problem 1 -How Good is an Idea?}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                     --------------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Albert Einstein was born on March 14, 1876, which means he would be 126 years old today.  This wouldn't be a \softline
particularly interesting birthday year, except that 1905 has become known as the "miraculous year", when \softline
Einstein published three important papers describing ideas that have since influenced all physics research.  \softline
Thus, 2005 really marks the 100th anniversary of modern physics. Not coincidentally, March 14th is Pi Day (3.14 \softline
- get it?).  It turns out that these two facts are related.  (But then again, everything is "relative" according \softline
to Dr. Einstein.)  Is it totally coincidental that Einstein tended to enjoy a slice of pie while he was working?  \softline
Absolutely not!\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Many know Einstein for his famous equation: E = mc^2.  What not many people know, however, is that Einstein also \softline
discovered a corollary to that law which can be used to calculate the amount of creative energy produced by \softline
someone who has eaten a piece of pie.  This is known as Albert's Creativity Measure (ACM).  It works as follows:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Whenever Einstein had a new idea, a "light bulb" lit up in his head.  He measured the brilliance of that new \softline
idea in terms of how bright the light bulb was.  He also measured the durability of an idea by how long the \softline
light bulb stayed on.  He was able to estimate the brightness of the light, since he could see the light in his \softline
head, but he had to use his famous equation to predict how durable the idea would be.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 According to Einstein, the creative energy produced by a piece of pie was proportional to the mass of the pie he \softline
had eaten when the idea came to him times the square of the constant 'c'.  For this corollary, however, 'c' is \softline
not the speed of light, but 31416.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 He defined the unit of durability to be the number of complete years the light in his head stayed on.  This unit \softline
has become known as an "Einstein".\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 For this problem, you are to write a program that inputs the mass of pie that had been eaten (in grams) and the \softline
brightness of the light (in watts).  It then outputs the number of Einsteins for that idea.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input to your program will be two integers (mass, then brightness) on a single line, separated by a space.  Your \softline
output must be a single integer followed by a newline ('\\n') character.  If your program produces any other \softline
output, it will be judged incorrect.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 To help you with your work, here is some information you will need to know:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Energy is measured in joules; mc^2 produces joules of energy if m is the number of grams.\par
}{\plain \fs16 \f1\fs16 Power is measured in watts, which is joules per second.\par
}{\plain \fs16 \f1\fs16 Each year contains exactly 365 days (no leap years).\par
}{\plain \fs16 \f1\fs16 Each day contains exactly 24 hours (no leap hours).\par
}{\plain \fs16 \f1\fs16 Each hour contains exactly 60 minutes (no leap minutes).\par
}{\plain \fs16 \f1\fs16 Each minute contains exactly 60 seconds (no leap seconds).\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 HINT: To avoid overflow you should do your calculations using variables of type double.  (Remember that your \softline
program is to output the number of whole years, hoever; any fractional part of a year should not be output.)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 200 60\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 104\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 1000 100\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 312\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 3:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 20 100\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 6\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 4:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 3000 200\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 469\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                     }{\plain \fs16 \b\f1\fs16 Problem 2 - High Speed String Theory}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                     ------------------------------------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 One of Einstein's great theories states that speed affects time and space.  He theorized that the faster \softline
something moves, the shorter it becomes.  Using this logic, the American Council of Measurement (ACM) has asked \softline
you to write a program that simulates what happens when you send text documents at high speeds - for if the \softline
Theory is true, it must apply to the papers Einstein wrote about Relativity, and it's up to you to prove it.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 For this problem, we will assume that traveling at high speeds does not affect consonants, numbers, or spaces, \softline
but that it causes vowels and punctuation marks to be removed.  (You can assume that 'y' is always a vowel.)  \softline
Hence, you are to write a program that takes a single line of input and outputs the same line with all vowels \softline
and punctuation removed.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input into your program will be one line of text no more than 255 characters in length.  That means it will \softline
include letters, numbers, spaces, punctuation (like commas, periods, parentheses, et cetera), and possibly a \softline
reference at the end.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program must output a single line of text, as described above, ending in a newline ('\\n') character.  If \softline
your program produces any other output it will be judged incorrect.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Albert Einstein\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 lbrt nstn\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input (all on one line):\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 the length to be discovered by the operation (b) we will call "the length of the (moving) rod in the stationary \softline
system." This we shall determine on the basis of our two principles, and we shall find that it differs from l. \softline
(1)\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output (all on one line):\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Th lngth t b dscvrd b th prtn b w wll cll th lngth f th mvng rd n th sttnr sstm  Ths w shll dtrmn n th bss f r \softline
tw prncpls nd w shll fnd tht t dffrs frm l 1\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 3:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Input (all on one line):\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 The results of the previous investigation lead to a very interesting conclusion, which is here to be deduced. \softline
(2)\par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Th rslts f th prvs nvstgtn ld t  vr ntrstng cnclsn whch s hr t b ddcd 2\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Footnotes:  Two of the examples were taken from the following papers:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 (1) Einstein A.  Zur Elektrodynamik bewegter K{\f3\u195\'20}{\u182\'b6}rper/On the Electrodynamics of Moving Bodies.  Annalen der \softline
Physik. Leipzig 17 (1905) 891; (translation into English) H. Lorentz, A. Einshtein, H. Minkowsky, and H. Weyl \softline
The Principle of Relativity, Methuen, London, (1923) 35.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 (2) Einstein, A.  Ist die Tr{\f3\u195\'20}{\u164\'a4}gheit eines K{\f3\u195\'20}{\u182\'b6}rpers von seinem Energieinhalt abh{\f3\u195\'20}{\u164\'a4}ngig?/Does the Inertia of a \softline
Body Depend upon its Energy Content? Annalen der Physik. Leipzig 18 (1905) 639; (translation into English)\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 H. Lorentz, A. Einshtein, H. Minkowsky, and H. Weyl The Principle of Relativity, Methuen, London (1923) 67.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16                     }{\plain \fs16 \b\f1\fs16 Problem 3 - Birthday Pie}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16                     ------------------------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 For Einstein's birthday, he invited his two best friends to a party.  Because his birthday is on Pi Day, instead \softline
of having a birthday cake, he decided to have a birthday pie.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Einstein let each of his friends take a piece of the pie first, then he took a piece for himself.  Being a \softline
mathematician, he was curious about the amount of pie that was left after his friends had taken their pieces.  \softline
(Actually, he wanted to know exactly how much pie was left for him!)\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 For this problem you are to write an Alternative (to) Cake Module (ACM) to help Dr. Einstein with his \softline
calculation.  Your program will input two fractions representing how much pie the friends took.  It will then \softline
output the fraction of the pie that is left, reduced as much as possible.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input to the program will be on two lines, one for each fraction.  The input data will be in the form of two \softline
integers on each line, one representing the numerator and the other representing the denominator of the \softline
fraction.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Your program output must be in the form "N/D", where N is the numerator of the remaining fraction of pie, and D \softline
is the denominator.  Remember that the fraction must be reduced to its lowest form and be followed by a newline\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ('\\n') character.  No other output is allowed.  If there is no pie left, just output 0.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 You may assume that each of the friends' pieces will always be greater than or equal to 0, and the sum of their \softline
two pieces will always be less than or equal to 1, so the solution will never be negative.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 1:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 1 4\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 1 4\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 1/2\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Example 2:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 1 4\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 2 3\par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 1/12\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 3:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 33 99\par
}{\plain \fs16 \f1\fs16 \tab 66 99\par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 4:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 2 17\par
}{\plain \fs16 \f1\fs16 \tab 5 23\par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab 260/391\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                     }{\plain \fs16 \b\f1\fs16 Problem 4 - Going in Circles}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                     ----------------------------\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 Einstein observed that the circumference of one of his beloved pies is a circle.  A circle has no start, and it \softline
has no end.  He observed that even events can be circular.  Events come full circle when you find yourself back\par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 where you started, which often happened when he was trying to come up with a new idea.  Typically this circular \softline
thinking involves a chain of causes and effects.  For example:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16             Cause                                  Effect\par
}{\plain \fs16 \f1\fs16             -----                                  ------\par
}{\plain \fs16 \f1\fs16 You finish a pie.                  -->   You decide you'd better buy more pie.\par
}{\plain \fs16 \f1\fs16 You decide you'd better buy pie.   -->   You go to the store and get some.\par
}{\plain \fs16 \f1\fs16 You get some pie.                  -->   You put it in the cupboard.\par
}{\plain \fs16 \f1\fs16 You have pie in the cupboard.      -->   You eat a piece every day.\par
}{\plain \fs16 \f1\fs16 You eat a piece of pie every day.  -->   After six days it's all gone.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                        You've now come full circle.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 In the example above, the effect of one event is the cause of the next event.\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 In this problem, you are asked to write a program that can be used as an Automatic Cycle-checking Machine (ACM) \softline
which determines if a list of unordered cause-and-effect pairs are circular; i.e., if they can be organized into \softline
one complete circle.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Your program will input a list of cause-and-effect pairs.  It will output\par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 "Full circle" if these pairs can all be organized into a single circular chain of events.  It will output "Nope" \softline
if the causes and effects cannot all be combined into a single circle.\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 For this program each cause and each effect will be described by a single word.  The first line of input to your \softline
program will be an integer that tells you how many pairs are to follow.  The remaining input will be a list of \softline
pairs on separate lines.  Each line will contain two words separated by a single space, with no leading or \softline
trailing spaces and no punctuation.  The first word will be the cause, and the second will be the effect.\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 Your output must exactly match the output in these examples (no extra formatting, text, or spaces allowed) with \softline
a newline ('\\n') at the end.\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 5\par
}{\plain \fs16 \f1\fs16 \tab Wealth Spending\par
}{\plain \fs16 \f1\fs16 \tab Poverty Frugality\par
}{\plain \fs16 \f1\fs16 \tab Saving Wealth\par
}{\plain \fs16 \f1\fs16 \tab Frugality Saving\par
}{\plain \fs16 \f1\fs16 \tab Spending Poverty\par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab Full circle\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 6\par
}{\plain \fs16 \f1\fs16 \tab Saving Spending\par
}{\plain \fs16 \f1\fs16 \tab Wealth Spending\par
}{\plain \fs16 \f1\fs16 \tab Poverty Frugality\par
}{\plain \fs16 \f1\fs16 \tab Saving Wealth\par
}{\plain \fs16 \f1\fs16 \tab Frugality Saving\par
}{\plain \fs16 \f1\fs16 \tab Spending Poverty\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \ul0 \tab Nope\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 3:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 6\par
}{\plain \fs16 \f1\fs16 \tab Wealth Spending\par
}{\plain \fs16 \f1\fs16 \tab Poverty Frugality\par
}{\plain \fs16 \f1\fs16 \tab Poverty Misery\par
}{\plain \fs16 \f1\fs16 \tab Saving Wealth\par
}{\plain \fs16 \f1\fs16 \tab Frugality Saving\par
}{\plain \fs16 \f1\fs16 \tab Spending Poverty\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab Nope\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 4:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 3\par
}{\plain \fs16 \f1\fs16 \tab Wealth Spending\par
}{\plain \fs16 \f1\fs16 \tab Saving Wealth\par
}{\plain \fs16 \f1\fs16 \tab Spending Poverty\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab Nope\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 5:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 1\par
}{\plain \fs16 \f1\fs16 \tab Happiness Happiness\par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab Full circle\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                    }{\plain \fs16 \b\f1\fs16 Problem 5 - Simplifying Einstein's Math}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16                    ---------------------------------------\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 Everyone knows that Einstein came up with the formula "E = mc^2", but not very many people know how strenuous \softline
the algebra was to get it to that simple form. For example, he may have started with something like:\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 \tab E = (mc - 5)(5 + c) + 5c(1 - m) + 25\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 Unfortunately, Einstein didn't have the advantage of a computer to help him with his calculations.  He had to do \softline
everything by hand, which was quite a laborious task.  You've decided to help today's physicists by designing an\par
}{\plain \fs16 \f1\fs16 Algebraic Complexity Minimizer (ACM) that will handle part of their work.\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 Your program will input two polynomials, calculate the product of the two, and then output the resulting \softline
polynomial in its simplest form.\par
}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 The input format for each polynomial will be an integer indicating the order of the polynomial (its highest \softline
exponent) on one line, followed by a line containing a list of all the coefficients of that polynomial.  The \softline
list will start with the coefficient of the highest order term, and include an integer for each term all the way \softline
down to the constant.  If a term is missing (i.e., its coefficient is zero), the list will contain a zero at \softline
that point.  Hence, if the order is N, there will always be N+1 values in the list.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16      <order of polynomial>\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16      <coefficients of polynomial, separated by spaces>\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 The output format will be in the form that you are used to seeing when polynomials are written on a single line \softline
of text (like Einstein's famous equation above).  Each term will be of the form Cx^E, where C is the\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 coefficient and E is the exponent.  Terms will be separated by either " + " or " - "; i.e., the plus or minus \softline
sign should have spaces before and after. Although this sounds straightforward, be careful to consider the \softline
special cases, for example:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab 7x^2 + -1x + 0   should be output as   7x^2 - x\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 and\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \tab -3x^3 + 2x^2 + 0x + 15   should be output as   -3x^3 + 2x^2 + 15\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 Your output should be on a single line ending with a newline ('\\n'). Remember not to output any extra \softline
information.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs16 \f1\fs16 Example 1:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 1\par
}{\plain \fs16 \f1\fs16 \tab 1 2\par
}{\plain \fs16 \f1\fs16 \tab 1\par
}{\plain \fs16 \f1\fs16 \tab 1 -2\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \ul0 \tab x^2 - 4\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 2:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 2\par
}{\plain \fs16 \f1\fs16 \tab 1 -2 3\par
}{\plain \fs16 \f1\fs16 \tab 1\par
}{\plain \fs16 \f1\fs16 \tab 1 -5\par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab x^3 - 7x^2 + 13x - 15\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Example 3:\par
}{\plain \fs16 \f1\fs16 ---------\par
}{\plain \fs16 \f1\fs16 Input:\par
}{\plain \fs16 \f1\fs16 \tab 5\par
}{\plain \fs16 \f1\fs16 \tab -4 0 1 0 0 0\par
}{\plain \fs16 \f1\fs16 \tab 1\par
}{\plain \fs16 \f1\fs16 \tab 1 0\par
}{\plain \fs16 \f1\fs16 \par
}{\plain \fs16 \f1\fs16 Output:\par
}{\plain \fs16 \f1\fs16 \tab -4x^6 + x^4\par
}\pard \fs20\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640
{\plain \fs20 \f1\fs20 \tab \tab \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs16 \f1\fs16 \par
}\sect \sectd \sbknone\marglsxn720\margrsxn720\headery1440\footery1440\endnhere\endnhere 
{\*\pnseclvl1\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl2\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl3\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl4\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl5\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl6\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl7\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl8\pndec\pnstart1{\pntxta .}}
{\*\pnseclvl9\pnlcrm\pnstart1{\pntxta )}}

\pard \fs20\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640
{\plain \fs20 \b\f1\fs20                                 Problem Set\par
}{\pntext\pard 1.\tab}
\pard \fs20\s10\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640 {\*\pn \pnlvl1\pndec\pnstart1\pnf1\pnindent1\pnhang{\pntxta .}}

{\plain \fs20 \b\f1\fs20  \par
}\pard\sl-2\par\sl0 \pard \fs20\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs20 \b\f1\fs20                 2006 ACM High School Programming Contest\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 DO NOT LOOK AT THE PROBLEMS UNTIL YOU ARE TOLD TO DO SO BY THE CHIEF JUDGE!!\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16         REMEMBER:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640{\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 All input comes from the keyboard, and all output goes to the screen.  In all problems, you should output ONLY \softline
what is specified.  Do not output debugging information, and do not prompt for input.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 You should turn in an executable file called "programN" for C++ programs or "programN.class" for Java programs, \softline
where N is the problem number.Do NOT turn in source code.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     Problem 1 - Where's the Rainbow?\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     --------------------------------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 It's well known that leprechauns hide their pots o' gold at the ends of rainbows.  What's not commonly \softline
understood is that the gold is hidden at the point on the ground where the rainbow is green (like a shamrock, \softline
you know), which turns out to be the exact center of the spectrum of colors in the bow. That means you need to \softline
be able to figure out where each color touches the ground in order to find the treasure.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Consider the rainbow shown in the following diagram:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                       vbgyyooyygbv\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                    vibgyorrrrrroygbiv\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                 vibgyorr        rroygbiv\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16              vibgyor                roygbiv\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16            vibgyor                    roygbiv\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16          vibgyor                        roygbiv \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16         vibgyor                          roygbiv\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16        vibgyor                            roygbiv\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16       vibgyor                              roygbiv \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16       vibgyor                              roygbiv \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16      vibgyor                                roygbiv\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16     vibgyor                                  roygbiv\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 +----+----+----+----+----+----+----+----+----+----+----+---\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 0   ^                                              ^\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16     4                                              51\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 This rainbow is said to have one endpoint at location 4 and one endpoint at location 51, measured in "rainbow \softline
color units".  Each color is one unit wide at the point where the rainbow touches the ground.  The color at each \softline
of the endpoints is violet, as indicated by the letter 'v'.  If one wanted to know which color was at location \softline
6, the answer would be 'blue', indicated by the 'b' at that location.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 You decide to increase your chances of finding the pot o' gold by designing an Automatic Color Measurer (ACM) \softline
program to calculate which color will be found at which location.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input to your ACM program will be three integers, all on one line.  The first\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 two numbers will correspond to the locations of the endpoints of a rainbow.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 The third number will be a location.  The first two numbers will always differ\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 by at least 14, so they will always define a valid rainbow.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 The program will compute the color that shines on the given location.  Output\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 from your program will be a single word.  If the rainbow hits the location,\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 the output will be the name of the color at that spot.  If the rainbow is not\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 shining on the location, your program will output "none".  Colors that\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 correspond to the letters in the diagram above are:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab violet\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab indigo\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab blue\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab green \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab yellow\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab orange\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab red\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 If your program produces any other output, it will be judged incorrect.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 1:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 4 51 45\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab red\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 2:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 10 -10 0\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab none\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 3:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab -1 -28 -3\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab blue\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 4:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 8 248 9\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab indigo\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 5:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 21 95 6\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab none\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     }{\plain \fs16 \b\f1\fs16 Problem 2 - Treasure Hunt\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \b\f1\fs16                     -------------------------}{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Whilst romping through the foothills one foggy March morning, you stumble\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 across a treasure map hidden under a rock.  The map is an Additive Coordinate\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Map (ACM), which provides information about where to find the treasure and\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 how to get there.  You've been fooled by incorrect maps in the past, so\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 before you go running all over everywhere trying to find a pot o' gold, you\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 decide to write a program to help you test its validity.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 The ACM provides a location relative to where you found the map.  This\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 location is the number of paces upward or downward on the map (north/south)\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 and the number of paces to the right or left (east/west).  It also includes a\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 list of directional segments, each of which contains a distance (in paces) and\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 a direction to walk (north, south, east, or west).\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Your program will take as input the location of the treasure, the total number\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 of directional segments, and a list of those segments.  Input will be on\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 multiple lines.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16      The first line will be an ordered pair, separated by a space, which\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16      represents the destination that is trying to be reached.  The first\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16      number in the pair is the number of paces east (if positive) or west (if\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16      negative).  The second number in the pair is the number of paces north\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16      (if positive) or south (if negative).\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16      The second input line will be a simple integer, telling you how many\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16      segments will follow.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16      After that, there will be as many lines as was indicated on the second\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16      line, each of which will be a number, a space, and then a direction.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16      The direction will be one character - N,S,E,W.  If it is "3 W", for\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16      example, you know that you should go 3 paces to the left on the cartesian\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16      coordinate system.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 You may assume that the map will never tell you go either negative or zero in\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 a specified direction.  You may also assume that all numbers will be integers.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Your program will output whether or not the directional segments end up at the\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 place where the map tells you the treasure is.  If the various segments lead\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 you to the final destination, your program must output "Treasure Found".  If\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 the segments don't lead to the treasure, it should output "Bad Map".  If your\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 program produces any other output, it will be judged incorrect.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 1:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ----------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 5 5\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 3\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 5 E\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 2 N\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 3 N\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Treasure Found\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 2:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ----------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab -2 5\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 5\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 8 N\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 31 S\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 3 W\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 8 N\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 1 E\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Bad Map\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 3:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ----------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 4 7\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 10\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 5 E\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 2 N\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 4 E\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 6 W\ul0 \tab \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 4 N\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 3 S\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 4 W\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 6 E\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 4 N\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 1 W\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Treasure Found\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     Problem 3 - Magic Squares\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     -------------------------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Being interested in all things magic, the Leprechaun Society has commissioned a study of semi-magic and magic \softline
squares.  Specifically, they would like an Automated Checker of Magic (ACM) program to determine the magical \softline
level of a square.  This task has fallen onto you.  Should you complete it successfully, the Leprechauns have \softline
promised to tell you the secret of how to locate the pot o' gold at the end of the rainbow.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 A square is a grid of integers where the number of rows is equal to the number of columns.  In a semi-magic \softline
square the sums of the numbers in each row and each column are equal.  A magic square is a semi-magic square \softline
where the sums of the numbers in the two diagonals is equal to those of the rows and columns. For example, the \softline
following square is a magic square.  If one or both of the diagonals did not have a sum of 15, it would only be \softline
a semi-magic square.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     +---+---+---+\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     | 2 | 7 | 6 | -> 15\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     +---+---+---+  \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     | 9 | 5 | 1 | -> 15\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     +---+---+---+\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     | 4 | 3 | 8 | -> 15\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     +---+---+---+\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                    /  |   |   |  \\\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                  15   V   V   V   15\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                       15  15  15\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Your task is to write a program that will read a square from standard input. It will then output whether the \softline
square is magic, semi-magic, or neither.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 The first line of input will contain a single integer, n, indicating the number of rows and columns in the \softline
square.  Note that n is guaranteed to be less than 50.  There will then be n lines of input, corresponding to \softline
the rows of a square.  Each line contains n integers.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Your program output must be a single line of text, exactly matching the examples below.  If your program \softline
produces any other output, it will be judged incorrect.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 1:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 4\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 16 3 2 13\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 5 10 11 8\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 9 6 7 12\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 4 15 14 1\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab This square is magic.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 2:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 3\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 1 2 3\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 2 3 1\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 3 1 2\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab This square is semi-magic.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 3:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 5\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 17 24 1 8 15\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 23 5 7 14 16\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 4 6 13 20 22\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 10 12 20 21 3\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 11 18 25 2 9\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab This square is not magic.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     Problem 4 - Limerick Police\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                     ---------------------------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 On St. Patrick's Day, everyone tries to be Irish: wearing green, eating Irish\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 food, and trying to write limericks.  The problem is, anyone who's not Irish and tries to write a limerick \softline
invariably gets it wrong.  The Association for Checking Makers of Limericks (ACM for short) has hired you to \softline
write a program to distinguish the true Irishmen and Irishwomen from the fakers by analyzing their poetry.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 A limerick is a five-line poem with the rhyme scheme "aabba".  That is, the first, second, and fifth lines must 
rhyme with each other, and the third and fourth must rhyme.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Two words rhyme if their final syllables have similar sounds.  Because is it very hard to teach a computer how \softline
words actually sound, the ACM has specified that two words rhyme if their 'rhyming suffixes' are exactly the \softline
same.  I.e., you will consider only the spelling, not the sound, of the suffix.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 The rhyming suffix of a word is defined to be the final non-terminal vowel, and all letters after it.  A \softline
terminal vowel is one that appears as the last letter of a word.  If the only vowel in a word is a terminal \softline
vowel, the entire word is considered to be the rhyming suffix.  For this problem, 'y' is always considered a \softline
vowel, so the set of vowels is a,e,i,o,u, and y\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Here are some examples of rhyming suffixes:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16     limerick: ick\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16     nantucket: et\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16     eire: ire\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16     wee: ee\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16     she: she\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Your program will take as input a supposed limerick.  The input will be five lines.  Each line will be no longer \softline
than 255 characters, and will contain at least two words, separated by spaces.  Each word will contain at least \softline
one vowel.  There will be no punctuation in or after the final word on each line.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 If the input has the correct rhyming scheme, your program must output the word "Aye".  If not, it must output \softline
the word "Blarney".  If your program produces any other output, it will be judged incorrect.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 1:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab There was an old man who supposed\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab That the street door was partially closed\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab But some very large rats\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Ate his coats and his hats\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab While that futile old gentleman dozed\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Aye\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 2:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab There once was a man from Nantucket\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Who kept all his cash in a bucket\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab But his daughter named Nan\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Ran away with a man\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab And as for the bucket, Nantucket\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Aye\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 3:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab There once was a coder so clever\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Whose code didn't work, however\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab She got it all right\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Through the first hundred bytes\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab But had a bug on the very last line\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Blarney\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                    Problem 5 - Irish Football\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                    --------------------------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Based upon the way many people celebrate St. Patrick's Day, you might be thinking that there's not much to \softline
Ireland besides magic, rainbows, and pots of gold.  But football (called soccer here in the States) is something \softline
the Irish take very seriously.  To handle the upcoming Cup Championship the Football Association of Ireland sets \softline
up the Athletic Competition Management (ACM)system.  The ACM assigns each football club a seed in the initial \softline
round of play.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 For example, in this ordering, Drogheda United would play the Bray Wanderers and Shelbourne would play St. \softline
Patrick's Athletic in round 1.  For either Drogheda or Bray to play Shelbourne, it would have to be in round 2.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16        ROUND 1             ROUND 2        ROUND 3\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Drogheda United\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 -----------------------|\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Bray Wanderers         |-------------|\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 -----------------------|             |\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16                                      |-------------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Shelbourne                           |\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 -----------------------|             |\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 St. Patrick's Athletic |-------------|\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 -----------------------|\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Some fans would like to know when their favorite team might play a particular rival, so the ACM has asked you to \softline
write a program to figure that out.  Given any ordering of teams, the ACM needs your help in determining which \softline
round any two teams could play in.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input to your program will be the number of clubs (always a power of 2), a list of football clubs in the order \softline
they would appear in a tournament bracket like the one shown above, followed by the names of two clubs that \softline
could play each other.  These will all be on separate lines.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output from your program will be a single integer - the number of the round that the two football clubs will \softline
play each other, assuming they both win all games necessary to reach that round.  If your program produces any \softline
other output, it will be judged incorrect.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 1:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 2\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Derry City\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Cork City\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Derry City\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Cork City\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 1\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 2:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 4\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Drogheda United\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Bray Wanderers\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Shelbourne\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab St. Patrick's Athletic\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Drogheda United\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Shelbourne\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 2\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Example 3:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 ---------\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Input:\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 8\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Waterford United\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Longford Town\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Sligo Rovers\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Bohemians\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Dublin City\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab U.C.D.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Shelbourne\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Bray Wanderers\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab Longford Town\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab U.C.D.\par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 Output:\ul0 \tab \ul0 \tab \par
}\pard \fs16\s63\tx0\tx958\tx1917\tx2876\tx3835\tx4794\tx5754\tx6712\tx7671\tx8630\tx8640 {\*\pn \pnlvlcont}
{\plain \fs16 \f1\fs16 \tab 3\par
}\pard \fs20\tx0\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640{\*\pn \pnlvlcont}
{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 \par
}{\plain \fs20 \f1\fs20 }\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab }